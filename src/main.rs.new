use eframe::egui;
use std::fs::{self, File};
use std::io::{Read, Write};
use std::path::PathBuf;
use std::sync::Arc;
use rfd::FileDialog;

fn main() -> Result<(), eframe::Error> {
    let options = eframe::NativeOptions {
        viewport: egui::ViewportBuilder::default()
            .with_inner_size([600.0, 500.0]),
        ..Default::default()
    };
    
    eframe::run_native(
        "翻译文件处理工具 BY 凌川雪",
        options,
        Box::new(|cc| {
            // 加载中文字体
            let mut font_data = Vec::new();
            if let Ok(mut file) = File::open("Fonts/msyh.ttf") {
                file.read_to_end(&mut font_data).unwrap();
                
                let mut fonts = egui::FontDefinitions::default();
                
                // 添加中文字体
                fonts.font_data.insert(
                    "msyh".to_owned(),
                    Arc::new(egui::FontData::from_owned(font_data)),
                );
                
                // 将中文字体放在proportional字体列表的第一位
                fonts
                    .families
                    .entry(egui::FontFamily::Proportional)
                    .or_default()
                    .insert(0, "msyh".to_owned());
                
                // 将中文字体也添加到等宽字体列表
                fonts
                    .families
                    .entry(egui::FontFamily::Monospace)
                    .or_default()
                    .push("msyh".to_owned());
                
                // 加载字体
                cc.egui_ctx.set_fonts(fonts);
            } else {
                println!("无法加载字体文件，请确保Fonts/msyh.ttf文件存在");
            }
            
            Ok(Box::new(TranslationApp::default()))
        }),
    )
}

#[derive(Debug, PartialEq, Clone, Copy)]
enum ConversionType {
    MpToPo,
    PoMerge,
    PoToMo,
}

#[derive(Clone)]
struct FileOperation {
    input_path1: Option<PathBuf>,
    input_path2: Option<PathBuf>,
    output_path: Option<PathBuf>,
    status: String,
    conversion_type: ConversionType,
}

impl Default for FileOperation {
    fn default() -> Self {
        Self {
            input_path1: None,
            input_path2: None,
            output_path: None,
            status: "就绪".to_string(),
            conversion_type: ConversionType::MpToPo,
        }
    }
}

struct TranslationApp {
    operations: Vec<FileOperation>,
    current_operation: FileOperation,
    logs: Vec<String>,
    dark_mode: bool,
}

impl Default for TranslationApp {
    fn default() -> Self {
        Self {
            operations: Vec::new(),
            current_operation: FileOperation::default(),
            logs: Vec::new(),
            dark_mode: false,
        }
    }
}

impl TranslationApp {
    fn add_log(&mut self, message: &str) {
        let timestamp = chrono::Local::now().format("%H:%M:%S").to_string();
        self.logs.push(format!("[{}] {}", timestamp, message));
    }
    
    fn convert_mp_to_po(&mut self) -> Result<(), String> {
        if let (Some(input), Some(output)) = (&self.current_operation.input_path1, &self.current_operation.output_path) {
            // 读取MP文件
            let mut content = String::new();
            let mut file = File::open(input).map_err(|e| format!("无法打开输入文件: {}", e))?;
            file.read_to_string(&mut content).map_err(|e| format!("无法读取文件内容: {}", e))?;
            
            // 转换为PO格式
            let po_content = self.mp_to_po_format(&content);
            
            // 写入PO文件
            let mut output_file = File::create(output).map_err(|e| format!("无法创建输出文件: {}", e))?;
            output_file.write_all(po_content.as_bytes()).map_err(|e| format!("无法写入文件: {}", e))?;
            
            self.add_log(&format!("MP转PO完成: {} -> {}", 
                input.file_name().unwrap_or_default().to_string_lossy(),
                output.file_name().unwrap_or_default().to_string_lossy()));
            
            Ok(())
        } else {
            Err("请同时选择输入MP文件和输出PO文件路径".to_string())
        }
    }
    
    fn merge_po_files(&mut self) -> Result<(), String> {
        if let (Some(input1), Some(input2), Some(output)) = (
            &self.current_operation.input_path1, 
            &self.current_operation.input_path2, 
            &self.current_operation.output_path
        ) {
            // 读取第一个PO文件
            let mut content1 = String::new();
            let mut file1 = File::open(input1).map_err(|e| format!("无法打开第一个PO文件: {}", e))?;
            file1.read_to_string(&mut content1).map_err(|e| format!("无法读取第一个PO文件内容: {}", e))?;
            
            // 读取第二个PO文件
            let mut content2 = String::new();
            let mut file2 = File::open(input2).map_err(|e| format!("无法打开第二个PO文件: {}", e))?;
            file2.read_to_string(&mut content2).map_err(|e| format!("无法读取第二个PO文件内容: {}", e))?;
            
            // 合并PO文件
            let merged_content = self.merge_po_content(&content1, &content2);
            
            // 写入合并后的PO文件
            let mut output_file = File::create(output).map_err(|e| format!("无法创建输出文件: {}", e))?;
            output_file.write_all(merged_content.as_bytes()).map_err(|e| format!("无法写入文件: {}", e))?;
            
            self.add_log(&format!("PO合并完成: {} + {} -> {}", 
                input1.file_name().unwrap_or_default().to_string_lossy(),
                input2.file_name().unwrap_or_default().to_string_lossy(),
                output.file_name().unwrap_or_default().to_string_lossy()));
            
            Ok(())
        } else {
            Err("请选择两个PO输入文件和一个输出文件路径".to_string())
        }
    }
    
    fn convert_po_to_mo(&mut self) -> Result<(), String> {
        if let (Some(input), Some(output)) = (&self.current_operation.input_path1, &self.current_operation.output_path) {
            // 读取PO文件
            let mut content = String::new();
            let mut file = File::open(input).map_err(|e| format!("无法打开PO文件: {}", e))?;
            file.read_to_string(&mut content).map_err(|e| format!("无法读取PO文件内容: {}", e))?;
            
            // 模拟转换为MO格式
            // 实际应用中应使用gettext-rs库进行正确转换
            let mo_content = content.as_bytes().to_vec();
            
            // 写入MO文件
            let mut output_file = File::create(output).map_err(|e| format!("无法创建MO输出文件: {}", e))?;
            output_file.write_all(&mo_content).map_err(|e| format!("无法写入MO文件: {}", e))?;
            
            self.add_log(&format!("PO转MO完成: {} -> {}", 
                input.file_name().unwrap_or_default().to_string_lossy(),
                output.file_name().unwrap_or_default().to_string_lossy()));
            
            Ok(())
        } else {
            Err("请同时选择输入PO文件和输出MO文件路径".to_string())
        }
    }
    
    // 将MP格式转换为PO格式的函数（简化版）
    fn mp_to_po_format(&self, mp_content: &str) -> String {
        let mut po_content = String::from("msgid \"\"\nmsgstr \"\"\n\"Content-Type: text/plain; charset=UTF-8\\n\"\n\"Content-Transfer-Encoding: 8bit\\n\"\n\n");
        
        for line in mp_content.lines() {
            if line.contains("=") {
                let parts: Vec<&str> = line.splitn(2, '=').collect();
                if parts.len() == 2 {
                    let key = parts[0].trim();
                    let value = parts[1].trim();
                    
                    po_content.push_str(&format!("msgid \"{}\"\nmsgstr \"{}\"\n\n", key, value));
                }
            }
        }
        
        po_content
    }
    
    // 合并两个PO文件内容的函数（简化版）
    fn merge_po_content(&self, po1: &str, po2: &str) -> String {
        // 这是一个非常简化的示例，实际的PO文件合并需要更复杂的逻辑
        let mut result = String::new();
        
        // 简单合并两个文件的内容
        result.push_str(po1);
        if !po1.ends_with("\n\n") {
            result.push_str("\n\n");
        }
        result.push_str(po2);
        
        result
    }
}

impl eframe::App for TranslationApp {
    fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {
        if self.dark_mode {
            ctx.set_visuals(egui::Visuals::dark());
        } else {
            ctx.set_visuals(egui::Visuals::light());
        }
        
        egui::CentralPanel::default().show(ctx, |ui| {
            ui.vertical_centered(|ui| {
                ui.heading("翻译文件处理工具");
            });
            
            ui.add_space(10.0);
            
            ui.horizontal(|ui| {
                ui.toggle_value(&mut self.dark_mode, "暗黑模式");
                
                ui.with_layout(egui::Layout::right_to_left(egui::Align::RIGHT), |ui| {
                    if ui.button("清除日志").clicked() {
                        self.logs.clear();
                    }
                });
            });
            
            ui.separator();
            
            ui.horizontal(|ui| {
                ui.label("转换类型:");
                ui.radio_value(&mut self.current_operation.conversion_type, ConversionType::MpToPo, "MP到PO");
                ui.radio_value(&mut self.current_operation.conversion_type, ConversionType::PoMerge, "PO合并");
                ui.radio_value(&mut self.current_operation.conversion_type, ConversionType::PoToMo, "PO到MO");
            });
            
            ui.add_space(10.0);
            
            match self.current_operation.conversion_type {
                ConversionType::MpToPo => {
                    ui.horizontal(|ui| {
                        ui.label("MP输入文件:");
                        
                        let input_text = if let Some(path) = &self.current_operation.input_path1 {
                            path.file_name().unwrap_or_default().to_string_lossy().to_string()
                        } else {
                            "未选择文件".to_string()
                        };
                        
                        ui.text_edit_singleline(&mut input_text.clone());
                        
                        if ui.button("浏览...").clicked() {
                            if let Some(path) = FileDialog::new()
                                .add_filter("MP文件", &["mp"])
                                .set_directory("/")
                                .pick_file() 
                            {
                                self.current_operation.input_path1 = Some(path);
                            }
                        }
                    });
                    
                    ui.horizontal(|ui| {
                        ui.label("PO输出文件:");
                        
                        let output_text = if let Some(path) = &self.current_operation.output_path {
                            path.file_name().unwrap_or_default().to_string_lossy().to_string()
                        } else {
                            "未选择文件".to_string()
                        };
                        
                        ui.text_edit_singleline(&mut output_text.clone());
                        
                        if ui.button("浏览...").clicked() {
                            if let Some(path) = FileDialog::new()
                                .add_filter("PO文件", &["po"])
                                .set_directory("/")
                                .save_file() 
                            {
                                self.current_operation.output_path = Some(path);
                            }
                        }
                    });
                },
                ConversionType::PoMerge => {
                    ui.horizontal(|ui| {
                        ui.label("第一个PO文件:");
                        
                        let input_text1 = if let Some(path) = &self.current_operation.input_path1 {
                            path.file_name().unwrap_or_default().to_string_lossy().to_string()
                        } else {
                            "未选择文件".to_string()
                        };
                        
                        ui.text_edit_singleline(&mut input_text1.clone());
                        
                        if ui.button("浏览...").clicked() {
                            if let Some(path) = FileDialog::new()
                                .add_filter("PO文件", &["po"])
                                .set_directory("/")
                                .pick_file() 
                            {
                                self.current_operation.input_path1 = Some(path);
                            }
                        }
                    });
                    
                    ui.horizontal(|ui| {
                        ui.label("第二个PO文件:");
                        
                        let input_text2 = if let Some(path) = &self.current_operation.input_path2 {
                            path.file_name().unwrap_or_default().to_string_lossy().to_string()
                        } else {
                            "未选择文件".to_string()
                        };
                        
                        ui.text_edit_singleline(&mut input_text2.clone());
                        
                        if ui.button("浏览...").clicked() {
                            if let Some(path) = FileDialog::new()
                                .add_filter("PO文件", &["po"])
                                .set_directory("/")
                                .pick_file() 
                            {
                                self.current_operation.input_path2 = Some(path);
                            }
                        }
                    });
                    
                    ui.horizontal(|ui| {
                        ui.label("合并后的PO文件:");
                        
                        let output_text = if let Some(path) = &self.current_operation.output_path {
                            path.file_name().unwrap_or_default().to_string_lossy().to_string()
                        } else {
                            "未选择文件".to_string()
                        };
                        
                        ui.text_edit_singleline(&mut output_text.clone());
                        
                        if ui.button("浏览...").clicked() {
                            if let Some(path) = FileDialog::new()
                                .add_filter("PO文件", &["po"])
                                .set_directory("/")
                                .save_file() 
                            {
                                self.current_operation.output_path = Some(path);
                            }
                        }
                    });
                },
                ConversionType::PoToMo => {
                    ui.horizontal(|ui| {
                        ui.label("PO输入文件:");
                        
                        let input_text = if let Some(path) = &self.current_operation.input_path1 {
                            path.file_name().unwrap_or_default().to_string_lossy().to_string()
                        } else {
                            "未选择文件".to_string()
                        };
                        
                        ui.text_edit_singleline(&mut input_text.clone());
                        
                        if ui.button("浏览...").clicked() {
                            if let Some(path) = FileDialog::new()
                                .add_filter("PO文件", &["po"])
                                .set_directory("/")
                                .pick_file() 
                            {
                                self.current_operation.input_path1 = Some(path);
                            }
                        }
                    });
                    
                    ui.horizontal(|ui| {
                        ui.label("MO输出文件:");
                        
                        let output_text = if let Some(path) = &self.current_operation.output_path {
                            path.file_name().unwrap_or_default().to_string_lossy().to_string()
                        } else {
                            "未选择文件".to_string()
                        };
                        
                        ui.text_edit_singleline(&mut output_text.clone());
                        
                        if ui.button("浏览...").clicked() {
                            if let Some(path) = FileDialog::new()
                                .add_filter("MO文件", &["mo"])
                                .set_directory("/")
                                .save_file() 
                            {
                                self.current_operation.output_path = Some(path);
                            }
                        }
                    });
                },
            }
            
            ui.add_space(10.0);
            
            ui.horizontal(|ui| {
                if ui.button("执行转换").clicked() {
                    let result = match self.current_operation.conversion_type {
                        ConversionType::MpToPo => self.convert_mp_to_po(),
                        ConversionType::PoMerge => self.merge_po_files(),
                        ConversionType::PoToMo => self.convert_po_to_mo(),
                    };
                    
                    match result {
                        Ok(()) => {
                            self.current_operation.status = "转换成功".to_string();
                            self.operations.push(self.current_operation.clone());
                            self.current_operation = FileOperation::default();
                        },
                        Err(e) => {
                            self.current_operation.status = format!("错误: {}", e);
                            self.add_log(&format!("错误: {}", e));
                        }
                    }
                }
                
                if ui.button("重置").clicked() {
                    self.current_operation = FileOperation::default();
                }
                
                ui.label(&self.current_operation.status);
            });
            
            ui.add_space(10.0);
            ui.separator();
            
            ui.collapsing("操作日志", |ui| {
                egui::ScrollArea::vertical()
                    .max_height(200.0)
                    .show(ui, |ui| {
                        if self.logs.is_empty() {
                            ui.label("没有操作日志记录");
                        } else {
                            for log in self.logs.iter() {
                                ui.label(log);
                            }
                        }
                    });
            });
            
            ui.add_space(10.0);
            ui.separator();
            
            ui.collapsing("已完成的操作", |ui| {
                if self.operations.is_empty() {
                    ui.label("没有已完成的操作");
                } else {
                    egui::ScrollArea::vertical()
                        .max_height(150.0)
                        .show(ui, |ui| {
                            for (i, op) in self.operations.iter().enumerate() {
                                let op_type = match op.conversion_type {
                                    ConversionType::MpToPo => "MP到PO",
                                    ConversionType::PoMerge => "PO合并",
                                    ConversionType::PoToMo => "PO到MO",
                                };
                                
                                let input1 = op.input_path1.as_ref()
                                    .map_or("无".to_string(), |p| p.file_name().unwrap_or_default().to_string_lossy().to_string());
                                
                                let input2 = op.input_path2.as_ref()
                                    .map_or("无".to_string(), |p| p.file_name().unwrap_or_default().to_string_lossy().to_string());
                                
                                let output = op.output_path.as_ref()
                                    .map_or("无".to_string(), |p| p.file_name().unwrap_or_default().to_string_lossy().to_string());
                                
                                ui.label(format!("{}. {}: {} + {} -> {}", 
                                    i+1, op_type, input1, input2, output));
                            }
                        });
                }
            });
        });
    }
} 