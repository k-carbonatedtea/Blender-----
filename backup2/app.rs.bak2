use eframe::egui;
use egui::{Color32, RichText, Ui};
use std::path::PathBuf;
use std::sync::mpsc::{channel, Receiver, Sender};
use std::time::{SystemTime, UNIX_EPOCH, Duration, Instant};
use chrono::prelude::*;
use std::sync::Arc;
use rayon::ThreadPoolBuilder;
use walkdir;
use open;

use crate::models::{AppState, ConversionType, FileOperation, AppConfig, ConversionStatus, ModStatus, ModInfo, ModsTab};
use crate::converters::mo_converter::MoConverter;
use crate::converters::po_converter::PoConverter;
use crate::converters::po_merger;
use crate::converters::csv_converter::CsvConverter;

// 娣诲姞鍚堝苟鐘舵€佹灇涓?pub enum MergeStatus {
    Started,
    Progress(f32),
    Completed(PathBuf),
    Failed(String),
}

pub struct App {
    state: AppState,
    config: AppConfig,
    rx: Option<Receiver<(usize, Result<Duration, String>)>>,
    tx: Option<Sender<(usize, Result<Duration, String>)>>,
    merge_rx: Receiver<MergeStatus>,
    merge_tx: Sender<MergeStatus>,
    thread_pool: Arc<rayon::ThreadPool>,
    selected_category: String,
    search_text: String,
    show_install_dialog: bool,
    install_path: String,
}

impl Default for App {
    fn default() -> Self {
        Self::new()
    }
}

impl App {
    pub fn new() -> Self {
        let (tx, rx) = channel();
        let (merge_tx, merge_rx) = channel();
        
        let thread_pool = ThreadPoolBuilder::new()
            .num_threads(num_cpus::get())
            .build()
            .unwrap();
        
        // 鍔犺浇閰嶇疆鏂囦欢
        let mut config = AppConfig::load();
        
        // 鍒涘缓搴旂敤鐘舵€佸苟浠庨厤缃腑璁剧疆鍊?        let mut state = AppState::default();
        state.main_mo_file = config.main_mo_file.clone();
        
        // 璁剧疆鍥哄畾鐨勮瑷€鍖呯洰褰?        let mods_dir = if let Some(local_dir) = dirs::data_local_dir() {
            local_dir.join("BLMM").join("mods")
        } else {
            std::env::temp_dir().join("BLMM").join("mods")
        };
        
        // 纭繚鐩綍瀛樺湪
        let _ = std::fs::create_dir_all(&mods_dir);
        
        // 璁剧疆鐩綍
        state.mods_directory = Some(mods_dir.clone());
        config.mods_directory = Some(mods_dir);
        
        // 璁剧疆杈撳嚭鐩綍
        state.output_directory = config.output_directory.clone();
        
        // 涓轰簡鍚戝悗鍏煎锛屾牴鎹富棰樿缃甦ark_mode鏍囧織
        state.dark_mode = config.theme != crate::models::AppTheme::Light 
            && config.theme != crate::models::AppTheme::Sepia;
            
        state.auto_batch = config.auto_batch;
        state.auto_close = config.auto_close;
        state.show_logs = config.show_logs;
        state.ignore_main_mo_entries = config.ignore_main_mo_entries;
        
        // 榛樿鏄剧ず璇█鍖呯鐞嗙晫闈?        state.show_mods = true;
        state.show_mods_tab = ModsTab::Mods;
            
        let mut app = Self {
            state,
            config,
            rx: Some(rx),
            tx: Some(tx),
            merge_rx,
            merge_tx,
            thread_pool: Arc::new(thread_pool),
            selected_category: "Default".to_string(),
            search_text: String::new(),
            show_install_dialog: false,
            install_path: String::new(),
        };
        
        // 鍚姩鏃惰嚜鍔ㄦ壂鎻忚瑷€鍖呯洰褰?        app.scan_mods_directory();
        
        app
    }
    
    fn process_conversion_results(&mut self) {
        if let Some(rx) = &self.rx {
            if let Ok((index, result)) = rx.try_recv() {
                if index < self.state.operations.len() {
                    match result {
                        Ok(duration) => {
                            let now = Local::now();
                            self.state.operations[index].status = ConversionStatus::Completed;
                            self.state.operations[index].end_time = Some(now);
                            
                            // 璁＄畻鑰楁椂锛堟绉掑拰绉掞級
                            self.state.operations[index].duration = Some(duration.as_secs_f64());
                            self.state.operations[index].elapsed_milliseconds = Some(duration.as_millis());
                            
                            if let Some(output_file) = &self.state.operations[index].output_file {
                                self.state.add_log(&format!("杞崲鎴愬姛: {}", output_file.display()));
                            }
                        }
                        Err(e) => {
                            self.state.operations[index].status = ConversionStatus::Failed;
                            self.state.operations[index].error = Some(e.clone());
                            self.state.add_log(&format!("杞崲澶辫触: {}", e));
                        }
                    }
                    
                    // 妫€鏌ユ槸鍚︽湁寰呭鐞嗙殑浠诲姟锛屽鏋滄湁锛屽垯鑷姩寮€濮?                    if self.state.auto_batch {
                        let next_pending = self.state.operations.iter().enumerate()
                            .find(|(_, op)| op.status == ConversionStatus::Pending)
                            .map(|(i, _)| i);
                            
                        if let Some(next_index) = next_pending {
                            self.convert_file(next_index);
                        }
                    }
                } else {
                    self.state.add_log(&format!("閿欒: 鏀跺埌鏃犳晥鐨勬搷浣滅储寮?{}", index));
                }
            }
        }
    }
    
    // 杞崲鍗曚釜鏂囦欢
    fn convert_file(&mut self, operation_index: usize) {
        if operation_index < self.state.operations.len() {
            // 娣诲姞璋冭瘯鏃ュ織
            self.state.add_log(&format!("寮€濮嬭浆鎹换鍔?#{}", operation_index + 1));
            self.start_conversion(operation_index);
        }
    }
    
    fn start_conversion(&mut self, operation_index: usize) {
        if operation_index >= self.state.operations.len() {
            return;
        }
        
        let operation = self.state.operations[operation_index].clone();
        self.state.operations[operation_index].status = ConversionStatus::Processing;
        // 璁板綍寮€濮嬫椂闂?        self.state.operations[operation_index].start_time = Some(Instant::now());
        
        if let Some(tx) = self.tx.clone() {
            let pool = self.thread_pool.clone();
            
            pool.spawn(move || {
                let start = Instant::now();
                
                let result = match operation.conversion_type {
                    ConversionType::MoToPo => {
                        if let (Some(input), Some(output)) = (&operation.input_file, &operation.output_file) {
                            MoConverter::convert_mo_to_po(input, output)
                                .map(|_| start.elapsed())
                        } else {
                            Err("杈撳叆鎴栬緭鍑鸿矾寰勬湭璁剧疆".to_string())
                        }
                    }
                    ConversionType::PoToMo => {
                        if let (Some(input), Some(output)) = (&operation.input_file, &operation.output_file) {
                            PoConverter::convert_po_to_mo(input, output)
                                .map(|_| start.elapsed())
                        } else {
                            Err("杈撳叆鎴栬緭鍑鸿矾寰勬湭璁剧疆".to_string())
                        }
                    }
                };
                
                let _ = tx.send((operation_index, result));
            });
        }
    }
    
    fn render_header(&mut self, ui: &mut Ui) {
        // 鑾峰彇涓婚鐨勫己璋冭壊锛岀敤浜庢爣棰?        let accent_color = crate::models::ThemeManager::get_accent_color(&self.config.theme);
        
        ui.heading(RichText::new("Blender瀛楀吀鍚堝苟绠＄悊鍣?By:鍑屽窛闆?).color(accent_color));
        ui.label("蹇€熷皢璇█鍖匬O鏂囦欢杞崲骞跺悎骞跺埌MO鏂囦欢涓?);
        
        ui.add_space(10.0);
    }
    
    fn render_operations(&mut self, ui: &mut Ui) {
        // 鑾峰彇涓婚鐨勫己璋冭壊锛岀敤浜庢爣棰?        let accent_color = crate::models::ThemeManager::get_accent_color(&self.config.theme);
        
        ui.heading(RichText::new("鏂囦欢鍒楄〃").color(accent_color));
        
        let mut to_delete = None;
        let mut start_conversion_index = None;
        let mut reset_completed_index = None;
        let mut retry_failed_index = None;
        let mut browse_input_index = None;
        let mut browse_output_index = None;
        
        for (i, operation) in self.state.operations.iter_mut().enumerate() {
        ui.horizontal(|ui| {
                ui.label(format!("{}. ", i + 1));
                
                ui.vertical(|ui| {
                    ui.horizontal(|ui| {
                        ui.label("绫诲瀷: ");
                        ui.radio_value(&mut operation.conversion_type, ConversionType::MoToPo, "MO 鈫?PO");
                        ui.radio_value(&mut operation.conversion_type, ConversionType::PoToMo, "PO 鈫?MO");
                    });
                    
                    ui.horizontal(|ui| {
                        ui.label("杈撳叆: ");
                        if let Some(input) = &operation.input_file {
                            // 鍙樉绀烘枃浠跺悕
                            let file_name = input.file_name()
                                .map_or_else(|| "[鏈煡]".to_string(), 
                                          |name| name.to_string_lossy().to_string());
                            let response = ui.label(file_name);
                            
                            // 鎮仠鏃舵樉绀哄畬鏁磋矾寰?                            let full_path = input.to_string_lossy().to_string();
                            response.on_hover_text(full_path);
                        } else {
                            ui.label("[鏈缃甝");
                        }
                        
                        if ui.button("娴忚").clicked() {
                            browse_input_index = Some(i);
                        }
                    });
                    
                    ui.horizontal(|ui| {
                        ui.label("杈撳嚭: ");
                        if let Some(output) = &operation.output_file {
                            // 鍙樉绀烘枃浠跺悕
                            let file_name = output.file_name()
                                .map_or_else(|| "[鏈煡]".to_string(), 
                                          |name| name.to_string_lossy().to_string());
                            let response = ui.label(file_name);
                            
                            // 鎮仠鏃舵樉绀哄畬鏁磋矾寰?                            let full_path = output.to_string_lossy().to_string();
                            response.on_hover_text(full_path);
                        } else {
                            ui.label("[鏈缃甝");
                        }
                        
                        if ui.button("娴忚").clicked() {
                            browse_output_index = Some(i);
                        }
                    });
                    
                    ui.horizontal(|ui| {
                        ui.label("鐘舵€? ");
                        match operation.status {
                            ConversionStatus::Pending => {
                                ui.label(operation.status.to_string());
                                if ui.button("寮€濮?).clicked() {
                                    start_conversion_index = Some(i);
                                }
                            },
                            ConversionStatus::Processing => {
                                if let Some(start) = operation.start_time {
                                    let elapsed = start.elapsed();
                                    ui.label(format!("澶勭悊涓?({:.2}绉?...", elapsed.as_secs_f64()));
                                } else {
                                    ui.label("澶勭悊涓?..");
                                }
                            },
                            ConversionStatus::Completed => {
                                // 鑾峰彇鎴愬姛鐘舵€侀鑹?                                let (_success_color, _warning_color, _error_color, _info_color) =
                                    crate::models::ThemeManager::get_status_colors();
                                ui.label(RichText::new("瀹屾垚").color(Color32::LIGHT_BLUE));
                                if let Some(duration) = operation.duration {
                                    ui.label(format!("({:.3}绉?", duration));
                                }
                                if let Some(elapsed_ms) = operation.elapsed_milliseconds {
                                    ui.label(format!("[{}姣]", elapsed_ms));
                                }
                                
                                if ui.button("鍐嶆杞崲").clicked() {
                                    reset_completed_index = Some(i);
                                }
                            },
                            ConversionStatus::Failed => {
                                // 鑾峰彇閿欒鐘舵€侀鑹?                                let (_success_color, _warning_color, _error_color, _info_color) =
                                    crate::models::ThemeManager::get_status_colors();
                                ui.label(RichText::new("澶辫触").color(Color32::RED));
                                if let Some(error) = &operation.error {
                                    ui.label(RichText::new(error).color(Color32::RED));
                                }
                                
                                if ui.button("閲嶈瘯").clicked() {
                                    retry_failed_index = Some(i);
                                }
                            },
                        }
                        
                        if ui.button("鍒犻櫎").clicked() {
                            to_delete = Some(i);
                        }
                    });
                });
            });
            
        ui.separator();
    }
    
        // 澶勭悊娴忚杈撳叆鏂囦欢
        if let Some(i) = browse_input_index {
            if i < self.state.operations.len() {
                let operation = &mut self.state.operations[i];
                let ext = match operation.conversion_type {
                    ConversionType::MoToPo => "mo",
                    _ => "po"
                };
                
                if let Some(file) = rfd::FileDialog::new()
                    .add_filter("鏂囦欢", &[ext])
                    .pick_file() {
                        operation.input_file = Some(file.clone());
                        
                        // 鑷姩璁剧疆杈撳嚭鏂囦欢鍚?                        let mut output_file = file.clone();
                        let new_ext = if ext == "mo" { "po" } else { "mo" };
                        output_file.set_extension(new_ext);
                        operation.output_file = Some(output_file);
                    }
            }
        }
        
        // 澶勭悊娴忚杈撳嚭鏂囦欢
        if let Some(i) = browse_output_index {
            if i < self.state.operations.len() {
                let operation = &mut self.state.operations[i];
                let ext = match operation.conversion_type {
                    ConversionType::MoToPo => "po",
                    ConversionType::PoToMo => "mo",
                };
                
                if let Some(file) = rfd::FileDialog::new()
                    .add_filter("鏂囦欢", &[ext])
                    .save_file() {
                        operation.output_file = Some(file);
                    }
            }
        }
        
        // 澶勭悊閲嶇疆鎿嶄綔
        if let Some(i) = reset_completed_index {
            if i < self.state.operations.len() {
                let operation = &mut self.state.operations[i];
                operation.status = ConversionStatus::Pending;
                operation.start_time = None;
                operation.end_time = None;
                operation.duration = None;
                operation.elapsed_milliseconds = None;
                operation.error = None;
                self.convert_file(i);
            }
        }
        
        // 澶勭悊閲嶈瘯鎿嶄綔
        if let Some(i) = retry_failed_index {
            if i < self.state.operations.len() {
                let operation = &mut self.state.operations[i];
                operation.status = ConversionStatus::Pending;
                operation.error = None;
                self.convert_file(i);
            }
        }
        
        // 澶勭悊寮€濮嬭浆鎹㈡搷浣?        if let Some(i) = start_conversion_index {
            self.convert_file(i);
        }
        
        // 澶勭悊鍒犻櫎鎿嶄綔
        if let Some(i) = to_delete {
            self.state.operations.remove(i);
        }
        
        ui.horizontal(|ui| {
            let accent_color = crate::models::ThemeManager::get_accent_color(&self.config.theme);
            
            // 鏍峰紡鍖栫殑娣诲姞鎸夐挳
            if ui.add(egui::Button::new(RichText::new("娣诲姞MO鈫扨O浠诲姟").color(accent_color))
                     .min_size(egui::vec2(140.0, 24.0)))
                     .clicked() {
                self.open_specific_file_dialog(ConversionType::MoToPo);
            }
            
            if ui.add(egui::Button::new(RichText::new("娣诲姞PO鈫扢O浠诲姟").color(accent_color))
                     .min_size(egui::vec2(140.0, 24.0)))
                     .clicked() {
                self.open_specific_file_dialog(ConversionType::PoToMo);
            }
            
            let (_success_color, _warning_color, _error_color, _info_color) =
                crate::models::ThemeManager::get_status_colors();
            
            if ui.add(egui::Button::new(RichText::new("鎵归噺澶勭悊").color(Color32::LIGHT_BLUE))
                     .min_size(egui::vec2(100.0, 24.0)))
                     .clicked() {
                self.batch_process();
            }
            
            ui.separator();
            
            ui.checkbox(&mut self.state.auto_close, "澶勭悊瀹屾垚鍚庤嚜鍔ㄥ叧闂?);
            ui.checkbox(&mut self.state.auto_batch, "鑷姩鎵瑰鐞?);
            
            ui.with_layout(egui::Layout::right_to_left(egui::Align::Center), |ui| {
                ui.label(format!("绾跨▼姹? {} 绾跨▼", num_cpus::get()));
            });
        });
    }
    
    fn render_logs(&mut self, ui: &mut Ui) {
        ui.collapsing("鏃ュ織", |ui| {
            egui::ScrollArea::vertical().max_height(150.0).show(ui, |ui| {
                for log in &self.state.logs {
                    ui.label(log);
                }
                
                // 鑷姩婊氬姩鍒板簳閮?                if !self.state.logs.is_empty() {
                    ui.scroll_to_cursor(Some(egui::Align::BOTTOM));
                }
            });
        });
    }
    
    fn render_settings(&mut self, ctx: &egui::Context) {
        if self.state.show_settings {
            // 褰撻€氳繃鑿滃崟鎵撳紑璁剧疆绐楀彛鏃讹紝鑷姩鍒囨崲鍒拌瑷€鍖呯鐞嗗櫒鐨勮缃爣绛鹃〉
            self.state.show_mods = true;
            self.state.show_mods_tab = ModsTab::Settings;
            self.state.show_settings = false;
        }
    }
    
    // 鎵撳紑鏂囦欢閫夋嫨瀵硅瘽妗?    #[allow(dead_code)]
    fn open_file_dialog(&mut self) {
        // 鍒涘缓涓€涓柊鐨勬搷浣滐紝浣跨敤褰撳墠搴旂敤鐘舵€佺殑杞崲绫诲瀷
        let mut new_operation = FileOperation::default();
        
        // 鏍规嵁褰撳墠杞崲绫诲瀷璁剧疆鏂囦欢杩囨护鍣?        let ext = match new_operation.conversion_type {
            ConversionType::MoToPo => "mo",
            _ => "po"
        };
        
        // 娣诲姞璋冭瘯鏃ュ織
        self.state.add_log(&format!("姝ｅ湪閫夋嫨{}鏂囦欢...", ext));
        
        // 鎵撳紑鏂囦欢閫夋嫨瀵硅瘽妗?        if let Some(file) = rfd::FileDialog::new()
            .add_filter("鏂囦欢", &[ext])
            .set_title(&format!("閫夋嫨{}鏂囦欢", ext))
                                .pick_file() {
                new_operation.input_file = Some(file.clone());
                                    
                                    // 鑷姩璁剧疆杈撳嚭鏂囦欢鍚?                let mut output_file = file.clone();
                let new_ext = if ext == "mo" { "po" } else { "mo" };
                output_file.set_extension(new_ext);
                new_operation.output_file = Some(output_file.clone());
                
                // 娣诲姞鍒版搷浣滃垪琛?                self.state.operations.push(new_operation);
                self.state.add_log(&format!("宸叉坊鍔犳柊浠诲姟: {} 鈫?{}", 
                    file.display(), 
                    output_file.display()));
            } else {
                self.state.add_log("鏂囦欢閫夋嫨宸插彇娑?);
            }
    }
    
    // 鎵归噺澶勭悊鎵€鏈夊緟澶勭悊鐨勬枃浠?    fn batch_process(&mut self) {
        // 鑾峰彇鎵€鏈夊緟澶勭悊鐨勬枃浠剁储寮?        let pending_indices: Vec<usize> = self.state.operations.iter().enumerate()
            .filter(|(_, op)| op.status == ConversionStatus::Pending)
            .map(|(i, _)| i)
            .collect();
            
        // 寮€濮嬪鐞嗙涓€涓枃浠?        if let Some(&index) = pending_indices.first() {
            self.convert_file(index);
        }
    }

    #[allow(dead_code)]
    fn format_time(dt: &DateTime<Local>) -> String {
        dt.format("%Y-%m-%d %H:%M:%S").to_string()
    }

    // 娣诲姞鏂扮殑鏂囦欢閫夋嫨瀵硅瘽妗嗗嚱鏁帮紝鍙互鎸囧畾杞崲绫诲瀷
    fn open_specific_file_dialog(&mut self, conversion_type: ConversionType) {
        // 鍒涘缓涓€涓柊鐨勬搷浣滐紝璁剧疆鎸囧畾鐨勮浆鎹㈢被鍨?        let mut new_operation = FileOperation::default();
        new_operation.conversion_type = conversion_type;
        
        // 鏍规嵁杞崲绫诲瀷璁剧疆鏂囦欢杩囨护鍣?        let ext = match conversion_type {
            ConversionType::MoToPo => "mo",
            ConversionType::PoToMo => "po",
        };
        
        // 娣诲姞璋冭瘯鏃ュ織
        self.state.add_log(&format!("姝ｅ湪閫夋嫨{}鏂囦欢...", ext));
        
        // 鎵撳紑鏂囦欢閫夋嫨瀵硅瘽妗?        if let Some(file) = rfd::FileDialog::new()
            .add_filter("鏂囦欢", &[ext])
            .set_title(&format!("閫夋嫨{}鏂囦欢", ext))
            .pick_file() 
        {
            new_operation.input_file = Some(file.clone());
            
            // 鑷姩璁剧疆杈撳嚭鏂囦欢鍚?            let mut output_file = file.clone();
            let new_ext = if ext == "mo" { "po" } else { "mo" };
            output_file.set_extension(new_ext);
            new_operation.output_file = Some(output_file.clone());
            
            // 娣诲姞鍒版搷浣滃垪琛?            self.state.operations.push(new_operation);
            self.state.add_log(&format!("宸叉坊鍔犳柊浠诲姟: {} 鈫?{}", 
                file.display(), 
                output_file.display()));
        } else {
            self.state.add_log("鏂囦欢閫夋嫨宸插彇娑?);
        }
    }

    fn render_mods(&mut self, ui: &mut Ui) {
        // 鑾峰彇涓婚寮鸿皟鑹?        let accent_color = crate::models::ThemeManager::get_accent_color(&self.config.theme);
        
        // Top menu bar
        ui.horizontal(|ui| {
            if ui.selectable_label(self.state.show_mods_tab == ModsTab::Mods, 
                           RichText::new("璇█鍖?).color(
                               if self.state.show_mods_tab == ModsTab::Mods { accent_color } 
                               else { ui.style().visuals.text_color() }
                           )).clicked() {
                self.state.show_mods_tab = ModsTab::Mods;
            }
            if ui.selectable_label(self.state.show_mods_tab == ModsTab::Package, 
                           RichText::new("浠撳簱").color(
                               if self.state.show_mods_tab == ModsTab::Package { accent_color } 
                               else { ui.style().visuals.text_color() }
                           )).clicked() {
                self.state.show_mods_tab = ModsTab::Package;
            }
            if ui.selectable_label(self.state.show_mods_tab == ModsTab::Settings, 
                           RichText::new("璁剧疆").color(
                               if self.state.show_mods_tab == ModsTab::Settings { accent_color } 
                               else { ui.style().visuals.text_color() }
                           )).clicked() {
                self.state.show_mods_tab = ModsTab::Settings;
            }
        });

        ui.separator();

        match self.state.show_mods_tab {
            ModsTab::Mods => self.render_mods_list(ui),
            ModsTab::Package => self.render_package_tab(ui),
            ModsTab::Settings => self.render_mod_settings(ui),
        }
    }

    fn render_mods_list(&mut self, ui: &mut Ui) {
        // 鑾峰彇涓婚棰滆壊
        let accent_color = crate::models::ThemeManager::get_accent_color(&self.config.theme);
        let (_success_color, _warning_color, _error_color, _info_color) =
            crate::models::ThemeManager::get_status_colors();
        
        // Top controls
        ui.horizontal(|ui| {
            ui.push_id("mods_combobox", |ui| {
                egui::ComboBox::from_id_source("profile_selector")
                    .selected_text(&self.selected_category)
                    .show_ui(ui, |ui| {
                        ui.selectable_value(&mut self.selected_category, "Default".to_string(), "榛樿");
                        // Could add other categories here
                    });
            });

            if ui.button("+").clicked() {
                // Add new profile
            }
            if ui.button("鈮?).clicked() {
                // Show profile options
            }

            // 娣诲姞"瀹夎璇█鍖?鎸夐挳锛屼娇鐢ㄥ己璋冭壊
            if ui.add(egui::Button::new(RichText::new("瀹夎璇█鍖?鍙閫?").color(accent_color))
                     .min_size(egui::vec2(150.0, 24.0)))
                     .clicked() {
                self.install_new_mod();
            }

            ui.with_layout(egui::Layout::right_to_left(egui::Align::Center), |ui| {
                let enabled_count = self.state.installed_mods.iter().filter(|m| m.status == ModStatus::Enabled).count();
                ui.label(format!("{} 璇█鍖?/ {} 宸插惎鐢?, self.state.installed_mods.len(), enabled_count));
                
                // 娣诲姞"瀵煎嚭鍩虹鏂囦欢"鎸夐挳 - 鏀惧湪鍚堝苟鎸夐挳鏃佽竟
                ui.add_space(5.0); // 澧炲姞涓€鐐归棿璺?                if ui.add(egui::Button::new(RichText::new("瀵煎嚭鍩虹鏂囦欢").color(Color32::LIGHT_GREEN))
                    .min_size(egui::vec2(110.0, 28.0)))
                    .on_hover_text("鐩存帴瀵煎嚭鍩虹MO鏂囦欢锛堜笉鍚堝苟锛夛紝浠庡悕绉颁腑绉婚櫎base")
                    .clicked() {
                    self.export_base_mo_file();
                }
                
                // 褰撴湁鍚敤鐨勮瑷€鍖呮椂鎴栭渶瑕侀噸鏂板悎骞舵椂鏄剧ず鍚堝苟鎸夐挳
                if enabled_count > 0 || self.state.needs_remerge {
                    // 濡傛灉闇€瑕侀噸鏂板悎骞讹紝鏄剧ず"閲嶆柊鍚堝苟"鎸夐挳骞朵娇鐢ㄤ笉鍚岄鑹?                    ui.push_id("remerge_button", |ui| {
                        // 鑾峰彇鐘舵€侀鑹?                        let (_success_color, _warning_color, _error_color, _info_color) =
                            crate::models::ThemeManager::get_status_colors();
                        
                        // 濡傛灉姝ｅ湪鍚堝苟涓紝鏄剧ず杩涘害鍔ㄧ敾
                        if self.state.is_merging {
                            let text = format!("鍚堝苟涓瓄}", ".".repeat(((self.state.merge_progress_anim / 10) % 4) as usize));
                            ui.add(egui::ProgressBar::new(self.state.merge_progress)
                                .text(RichText::new(text).color(Color32::LIGHT_BLUE))
                                .fill(Color32::LIGHT_BLUE)
                                .animate(true));
                        } else {
                            let button_text = if self.state.needs_remerge {
                                RichText::new("閲嶆柊鍚堝苟").color(Color32::LIGHT_BLUE)
                            } else {
                                RichText::new("搴旂敤鍒癕O鏂囦欢").color(Color32::LIGHT_BLUE)
                            };
                            
                            if ui.add(button_text)
                                .min_size(egui::vec2(130.0, 28.0)))
                                .clicked() {
                                // 璁剧疆鍚堝苟鐘舵€佸苟鍚姩绾跨▼
                                self.state.is_merging = true;
                                self.state.merge_progress = 0.0;
                                self.state.merge_progress_anim = 0;
                                
                                // 鍦ㄧ嚎绋嬩腑鎵ц鍚堝苟锛屼互閬垮厤UI鍐荤粨
                                let tx = self.merge_tx.clone();
                                let po_files: Vec<PathBuf> = self.state.installed_mods.iter()
                                    .filter(|m| m.status == ModStatus::Enabled)
                                    .map(|m| m.path.clone())
                                    .collect();
                                let ignore_main = self.state.ignore_main_mo_entries;
                                
                                self.thread_pool.spawn(move || {
                                    // 閫氱煡寮€濮?                                    let _ = tx.send(MergeStatus::Started);
                                    
                                    // 鍒涘缓缂撳瓨鐩綍
                                    let cache_dir = if let Some(local_dir) = dirs::data_local_dir() {
                                        local_dir.join("BLMM").join("cache")
                                    } else {
                                        std::env::temp_dir().join("BLMM").join("cache")
                                    };
                                    
                                    if let Err(e) = std::fs::create_dir_all(&cache_dir) {
                                        let _ = tx.send(MergeStatus::Failed(format!("鍒涘缓缂撳瓨鐩綍澶辫触: {}", e)));
                                        return;
                                    }
                                    
                                    // 缂撳瓨鍚堝苟PO鐨勮矾寰?                                    let cached_po_path = cache_dir.join("cached_merged.po");
                                    
                                    // 鏇存柊杩涘害 25%
                                    let _ = tx.send(MergeStatus::Progress(0.25));
                                    
                                    // 鍚堝苟PO鏂囦欢
                                    match po_merger::merge_po_files(&po_files, &cached_po_path, ignore_main) {
                                        Ok(_) => {
                                            // 鏇存柊杩涘害 75%
                                            let _ = tx.send(MergeStatus::Progress(0.75));
                                            
                                            // 瀹屾垚
                                            let _ = tx.send(MergeStatus::Completed(cached_po_path));
                                        },
                                        Err(e) => {
                                            let _ = tx.send(MergeStatus::Failed(format!("鍚堝苟PO鏂囦欢澶辫触: {}", e)));
                                        }
                                    }
                                });
                            }
                        }
                    });
                }
            });
        });

        // Table header
        ui.horizontal(|ui| {
            ui.add_space(30.0); // Checkbox column
            ui.label("璇█鍖呭悕绉?).on_hover_text("鎸夊悕绉版帓搴?);
            ui.with_layout(egui::Layout::right_to_left(egui::Align::Center), |ui| {
                ui.label("浼樺厛绾?鈻?).on_hover_text("鏁板瓧瓒婂皬浼樺厛绾ц秺楂橈紝浼樺厛绾ч珮鐨勭炕璇戝皢瑕嗙洊浼樺厛绾т綆鐨勭炕璇?);
                ui.label("鐗堟湰");
                ui.label("绫诲埆");
            });
        });

        ui.separator();

        // 璁＄畻鍚堥€傜殑楂樺害锛屼繚鐣欒冻澶熺┖闂寸粰鏃ュ織鍖哄煙
        let available_height = ui.available_height();
        // 鐣欏嚭鏃ュ織鍖哄煙楂樺害锛堝鏋滄棩蹇楀彲瑙侊級
        let log_area_height = if self.state.show_logs { 220.0 } else { 0.0 };
        let mods_list_height = available_height - log_area_height - 40.0; // 棰濆鐣欏嚭涓€浜涚┖闂寸粰UI鍏冪礌

        // Mods list
        let mut to_enable = None;
        let mut to_disable = None;
        let mut to_uninstall = None;

        // 鎷栨斁鍔熻兘宸茬Щ闄?        // 鏍规嵁鐢ㄦ埛瑕佹眰锛屽凡鍒犻櫎鎷栨嫿瀹夎PO鏂囦欢鐨勫姛鑳?
        // 濡傛灉娌℃湁mods锛屾樉绀轰竴涓彁绀哄尯鍩?        if self.state.installed_mods.is_empty() {
            let available_rect = ui.available_rect_before_wrap();
            let empty_area_rect = egui::Rect::from_min_size(
                available_rect.min,
                egui::Vec2::new(available_rect.width(), mods_list_height)
            );
            
            let empty_area_response = ui.allocate_rect(
                empty_area_rect,
                egui::Sense::hover()
            );
            
            let painter = ui.painter();
            let rect = empty_area_response.rect;
            
            painter.rect_stroke(
                rect,
                5.0,
                egui::Stroke::new(1.0, Color32::from_rgb(100, 100, 100))
            );
            
            painter.text(
                rect.center(),
                egui::Align2::CENTER_CENTER,
                "鐐瑰嚮涓婃柟\"瀹夎璇█鍖匼"鎸夐挳娣诲姞璇█鍖?,
                egui::TextStyle::Body.resolve(ui.style()),
                Color32::from_rgb(180, 180, 180)
            );
        } else {
            // 濡傛灉鏈塵ods锛屾樉绀轰竴涓彲婊氬姩鍒楄〃
            ui.push_id("mods_list_scroll", |ui| {
                egui::ScrollArea::vertical().max_height(mods_list_height).show(ui, |ui| {
                    let mut move_up_index = None;
                    let mut move_down_index = None;
                    
                    for (index, mod_info) in self.state.installed_mods.iter().enumerate() {
                        ui.push_id(index, |ui| {
                            let row_response = ui.horizontal(|ui| {
                                // Checkbox for enabled/disabled
                                let mut is_enabled = mod_info.status == ModStatus::Enabled;
                                
                                // 浣跨敤on_change鏉ユ娴嬪閫夋鐘舵€佸彉鍖?                                if ui.checkbox(&mut is_enabled, "").changed() {
                                    // 鍙湁褰撶姸鎬佺‘瀹炲彂鐢熷彉鍖栨椂鎵嶆坊鍔犲埌寰呭鐞嗛槦鍒?                                    if is_enabled {
                                        to_enable = Some(index);
                                    } else {
                                        to_disable = Some(index);
                                    }
                                    
                                    // 鐩存帴鍦ㄦ澶勮缃畁eeds_remerge鏍囧織
                                    self.state.needs_remerge = true;
                                }

                                // Color the selected row
                                let text_color = if is_enabled { Color32::LIGHT_BLUE } else { ui.style().visuals.text_color() };
                                ui.colored_label(text_color, &mod_info.name);

                                // Right side of the row
                                ui.with_layout(egui::Layout::right_to_left(egui::Align::Center), |ui| {
                                    // 娣诲姞涓婁笅绉诲姩鎸夐挳
                                    let can_move_down = index < self.state.installed_mods.len() - 1;
                                    let can_move_up = index > 0;
                                    
                                    if ui.add_enabled(can_move_down, egui::Button::new("鈻?)).clicked() {
                                        // 涓嬬Щ
                                        move_down_index = Some(index);
                                    }
                                    
                                    if ui.add_enabled(can_move_up, egui::Button::new("鈻?)).clicked() {
                                        // 涓婄Щ
                                        move_up_index = Some(index);
                                    }
                                    
                                    ui.label(format!("{}", index)); // Priority
                                    ui.label(mod_info.version.as_deref().unwrap_or("1.0.0")); // Version
                                    ui.label(mod_info.description.as_deref().unwrap_or("璇█鍖?)); // Category
                                });
                            });

                            // Highlight when hovered
                            if row_response.response.hovered() {
                                row_response.response.clone().highlight();
                            }

                            // Context menu
                            row_response.response.context_menu(|ui| {
                                if ui.button("閲嶅懡鍚?).clicked() {
                                    // 鎵撳紑閲嶅懡鍚嶅璇濇
                                    let mod_name = self.state.installed_mods[index].name.clone();
                                    self.state.rename_mod_index = Some(index);
                                    self.state.rename_mod_name = mod_name;
                                    ui.close_menu();
                                }
                                
                                if ui.button("鍗歌浇").clicked() {
                                    to_uninstall = Some(index);
                                    ui.close_menu();
                                }
                            });
                        });

                        ui.separator();
                    }
                    
                    // 澶勭悊浼樺厛绾хЩ鍔ㄦ搷浣?                    if let Some(index) = move_up_index {
                        if index > 0 {
                            self.state.installed_mods.swap(index, index - 1);
                            self.state.needs_remerge = true;
                        }
                    }
                    
                    if let Some(index) = move_down_index {
                        if index < self.state.installed_mods.len() - 1 {
                            self.state.installed_mods.swap(index, index + 1);
                            self.state.needs_remerge = true;
                        }
                    }
                });
            });
        }

        // Handle mod state changes
        if let Some(index) = to_enable {
            self.enable_mod(index);
        }
        
        if let Some(index) = to_disable {
            self.disable_mod(index);
        }
        
        if let Some(index) = to_uninstall {
            self.uninstall_mod(index);
        }

        // 鏄剧ず鏃ュ織鍖哄煙锛堝鏋滃惎鐢級
        if self.state.show_logs {
            ui.separator();
            ui.horizontal(|ui| {
                ui.heading("鏃ュ織");
                if ui.button("娓呯┖").clicked() {
                    self.state.logs.clear();
                }
                
                ui.with_layout(egui::Layout::right_to_left(egui::Align::Center), |ui| {
                    ui.text_edit_singleline(&mut self.search_text).on_hover_text("鎼滅储鏃ュ織");
                    ui.label("鎼滅储:");
                    
                    if ui.button(if self.state.show_logs { "闅愯棌鏃ュ織" } else { "鏄剧ず鏃ュ織" }).clicked() {
                        self.state.show_logs = !self.state.show_logs;
                        // 淇濆瓨閰嶇疆
                        self.config.show_logs = self.state.show_logs;
                        self.config.save().ok();
                    }
                });
            });

            ui.push_id("logs_scroll", |ui| {
                egui::ScrollArea::vertical().max_height(200.0).show(ui, |ui| {
                for log in &self.state.logs {
                        if self.search_text.is_empty() || log.to_lowercase().contains(&self.search_text.to_lowercase()) {
                    ui.label(log);
                        }
                }
                
                    // Auto-scroll to the latest log
                if !self.state.logs.is_empty() {
                    ui.scroll_to_cursor(Some(egui::Align::BOTTOM));
                }
            });
        });
    }
    
        // Install dialog
        self.render_install_dialog(ui.ctx());
    }

    // Get or create mods cache directory
    fn get_or_create_mods_cache_dir(&self) -> Option<PathBuf> {
        // 浣跨敤 AppData\Local\BLMM\mods 鐩綍浣滀负榛樿鐩綍
        let cache_dir = if let Some(local_dir) = dirs::data_local_dir() {
            local_dir.join("BLMM").join("mods")
        } else {
            // 濡傛灉鏃犳硶鑾峰彇绯荤粺鏈湴鏁版嵁鐩綍锛屼娇鐢ㄤ复鏃剁洰褰?            std::env::temp_dir().join("BLMM").join("mods")
        };
        
        // 纭繚鐩綍瀛樺湪
        if let Err(e) = std::fs::create_dir_all(&cache_dir) {
            eprintln!("鍒涘缓璇█鍖呯紦瀛樼洰褰曞け璐? {}", e);
            return None;
        }
        
        Some(cache_dir)
    }

    // Generate the cached merged PO file from selected mods
    #[allow(dead_code)]
    fn generate_cached_merged_po(&mut self) {
        // 璇ユ柟娉曠幇鍦ㄨ绾跨▼鍖栧鐞嗭紝杩欓噷涓嶉渶瑕佷换浣曟搷浣?        // 鎵€鏈夐€昏緫閮界Щ鍒颁簡鐐瑰嚮浜嬩欢鍜宲rocess_merge_status鏂规硶涓?    }

    // Apply the cached merged PO file to the main MO file
    fn apply_merged_po_to_mo(&mut self) {
        // Check if we have main MO file and cached merged PO
        if self.state.main_mo_file.is_none() {
            self.state.add_log("閿欒: 璇峰厛鍦ㄨ缃腑璁剧疆涓籑O鏂囦欢");
            return;
        }
        
        if self.state.cached_merged_po.is_none() {
            self.state.add_log("閿欒: 娌℃湁鍙敤鐨勫悎骞禤O缂撳瓨锛岃鍏堢偣鍑?鍚堝苟閫変腑PO'");
            return;
        }
        
        let main_mo_file = self.state.main_mo_file.clone().unwrap();
        let cached_po_file = self.state.cached_merged_po.clone().unwrap();
        
        // 浣跨敤 AppData\Local\BLMM\cache 鐩綍
        let cache_dir = if let Some(local_dir) = dirs::data_local_dir() {
            local_dir.join("BLMM").join("cache")
        } else {
            // 濡傛灉鏃犳硶鑾峰彇绯荤粺鏈湴鏁版嵁鐩綍锛屼娇鐢ㄤ复鏃剁洰褰?            std::env::temp_dir().join("BLMM").join("cache")
        };
        
        // 纭繚缂撳瓨鐩綍瀛樺湪
        if let Err(e) = std::fs::create_dir_all(&cache_dir) {
            self.state.add_log(&format!("鍒涘缓缂撳瓨鐩綍澶辫触: {}", e));
            return;
        }
        
        // Create output MO file path - 浣跨敤鐢ㄦ埛璁剧疆鐨勮緭鍑虹洰褰曟垨妗岄潰涓婄殑"BLMM瀵煎嚭"鏂囦欢澶?        let output_mo_path = if let Some(output_dir) = &self.state.output_directory {
            // 浣跨敤鐢ㄦ埛璁剧疆鐨勮緭鍑虹洰褰?            if let Err(e) = std::fs::create_dir_all(output_dir) {
                self.state.add_log(&format!("鍒涘缓杈撳嚭鐩綍澶辫触: {}", e));
                // 濡傛灉鍒涘缓鐩綍澶辫触锛屽洖閫€鍒版闈笂鐨?BLMM瀵煎嚭"鏂囦欢澶?                self.create_default_output_directory()
                    .map(|dir| dir.join("blender.mo"))
                    .unwrap_or_else(|| cache_dir.join("blender.mo"))
            } else {
                // 浣跨敤璁剧疆鐨勮緭鍑虹洰褰?                output_dir.join("blender.mo")
            }
        } else {
            // 鏈缃緭鍑虹洰褰曪紝浣跨敤妗岄潰涓婄殑"BLMM瀵煎嚭"鏂囦欢澶?            self.create_default_output_directory()
                .map(|dir| dir.join("blender.mo"))
                .unwrap_or_else(|| {
                    // 濡傛灉鍒涘缓妗岄潰鏂囦欢澶瑰け璐ワ紝鍥為€€鍒颁富MO鏂囦欢鎵€鍦ㄧ洰褰?                    if let Some(parent) = main_mo_file.parent() {
                        parent.join("blender.mo")
                    } else {
                        cache_dir.join("blender.mo")
                    }
                })
        };
        
        // Convert the main MO file to PO first
        let main_po_path = cache_dir.join("main.po");
        self.state.add_log("姝ｅ湪灏嗕富MO鏂囦欢杞崲涓篜O鏍煎紡...");
        
        match MoConverter::convert_mo_to_po(&main_mo_file, &main_po_path) {
            Ok(_) => {
                self.state.add_log("涓籑O鏂囦欢杞崲鎴愬姛锛屽噯澶囦笌缂撳瓨PO鍚堝苟...");
                
                // Merge main PO with cached PO
                let all_po_files = vec![main_po_path.clone(), cached_po_file];
                let final_merged_po = cache_dir.join("final_merged.po");
                
                // 璁板綍鏄惁浣跨敤浜嗗拷鐣ヤ富mo鏉＄洰鐨勯€夐」
                let ignore_msg = if self.state.ignore_main_mo_entries {
                    "锛堝凡鍚敤蹇界暐涓籑O鏉＄洰妯″紡锛?
                } else {
                    ""
                };
                
                match po_merger::merge_po_files(&all_po_files, &final_merged_po, self.state.ignore_main_mo_entries) {
                    Ok(_) => {
                        self.state.add_log(&format!("鏈€缁圥O鏂囦欢鍚堝苟鎴愬姛{}锛屾鍦ㄨ浆鎹负MO鏍煎紡...", ignore_msg));
                        
                        // Convert the final merged PO to MO
                        match PoConverter::convert_po_to_mo(&final_merged_po, &output_mo_path) {
                            Ok(_) => {
                                // 鑾峰彇杈撳嚭鐩綍鐢ㄤ簬鏃ュ織鏄剧ず
                                let output_dir = output_mo_path.parent()
                                    .map_or_else(|| "[鏈煡鐩綍]".to_string(), 
                                               |dir| dir.to_string_lossy().to_string());
                                let file_name = output_mo_path.file_name()
                                    .map_or_else(|| "[鏈煡鏂囦欢]".to_string(), 
                                               |name| name.to_string_lossy().to_string());
                                self.state.add_log(&format!("鍚堝苟瀹屾垚! 鏂癕O鏂囦欢宸蹭繚瀛樺埌: {}/{}", output_dir, file_name));
                            },
                            Err(e) => {
                                self.state.add_log(&format!("灏嗗悎骞跺悗鐨凱O杞崲涓篗O澶辫触: {}", e));
                            }
                        }
                    },
                    Err(e) => {
                        self.state.add_log(&format!("鏈€缁圥O鏂囦欢鍚堝苟澶辫触: {}", e));
                    }
                }
            },
            Err(e) => {
                self.state.add_log(&format!("灏嗕富MO鏂囦欢杞崲涓篜O澶辫触: {}", e));
            }
        }
    }

    // 鍒涘缓榛樿鐨勮緭鍑虹洰褰曪紙妗岄潰涓婄殑"BLMM瀵煎嚭"鏂囦欢澶癸級
    fn create_default_output_directory(&mut self) -> Option<PathBuf> {
        // 鑾峰彇妗岄潰璺緞
        let desktop_dir = dirs::desktop_dir()?;
        let default_output_dir = desktop_dir.join("BLMM瀵煎嚭");
        
        // 灏濊瘯鍒涘缓鐩綍
        match std::fs::create_dir_all(&default_output_dir) {
            Ok(_) => {
                self.state.add_log(&format!("宸插垱寤洪粯璁よ緭鍑虹洰褰? {}", default_output_dir.to_string_lossy()));
                Some(default_output_dir)
            },
            Err(e) => {
                self.state.add_log(&format!("鍒涘缓榛樿杈撳嚭鐩綍澶辫触: {}", e));
                None
            }
        }
    }

    // Restore the refresh_mods_list function
    #[allow(dead_code)]
    fn refresh_mods_list(&mut self) {
        self.scan_mods_directory();
    }

    fn render_install_dialog(&mut self, ctx: &egui::Context) {
        if self.show_install_dialog {
            egui::Window::new("瀹夎")
                .collapsible(false)
                .show(ctx, |ui| {
                    ui.horizontal(|ui| {
                        if ui.button("馃搧").clicked() {
                            if let Some(path) = rfd::FileDialog::new()
                                .set_title("Choose Download Directory")
                                .pick_folder() {
                                self.install_path = path.display().to_string();
                            }
                        }
                        ui.text_edit_singleline(&mut self.install_path);
                    });

                    egui::ScrollArea::vertical().show(ui, |ui| {
                        let file_types = ["girly_animation_pack_v107_switch.bnp", 
                                         "grav boosters-6816-2-0-1-1702399400.zip",
                                         "hyliapack.bnp", 
                                         "Legendary Modification-1379-1-0-2-1697809243.7z"];
                                         
                        for file in file_types {
                            ui.horizontal(|ui| {
                                ui.checkbox(&mut false, "");
                                ui.label(file);
                            });
                        }
                    });

                    if ui.button("鍏抽棴").clicked() {
                        self.show_install_dialog = false;
                    }
                });
        }
    }

    fn render_package_tab(&mut self, ui: &mut Ui) {
        ui.heading("璇█鍖呯鐞?);
        
        ui.horizontal(|ui| {
            if ui.button("娴忚鍙敤璇█鍖?).clicked() {
                // This would connect to a repository or show local packages
            }
            
            if ui.button("鏇存柊璇█鍖呭垪琛?).clicked() {
                // This would refresh available packages
            }
        });
        
        ui.separator();
        
        ui.label("娌℃湁鍙敤鐨勮瑷€鍖呫€傝鏇存柊璇█鍖呭垪琛ㄦ垨妫€鏌ョ綉缁滆繛鎺ャ€?);
    }

    fn render_mod_settings(&mut self, ui: &mut Ui) {
        // 鑾峰彇涓婚鐨勫己璋冭壊
        let accent_color = crate::models::ThemeManager::get_accent_color(&self.config.theme);
        
        ui.heading(RichText::new("璁剧疆").color(accent_color));
        
        // 淇濆瓨鍘熷閰嶇疆鍊硷紝浠ユ娴嬫洿鏀?        let orig_main_mo_file = self.state.main_mo_file.clone();
        let orig_dark_mode = self.state.dark_mode;
        let orig_auto_batch = self.state.auto_batch;
        let orig_auto_close = self.state.auto_close;
        let orig_show_logs = self.state.show_logs;
        let orig_ignore_main_mo_entries = self.state.ignore_main_mo_entries;
        let orig_theme = self.config.theme.clone();
        
        // 娣诲姞涓婚璁剧疆閮ㄥ垎
        ui.collapsing("鐣岄潰涓婚", |ui| {
            let theme_names = crate::models::ThemeManager::get_theme_names();
            
            // 缁樺埗涓婚閫夋嫨鎸夐挳
            ui.horizontal_wrapped(|ui| {
                for (name, theme) in theme_names {
                    // 璁剧疆鎸夐挳鏍峰紡
                    let mut button = egui::Button::new(name);
                    
                    // 鏍规嵁涓婚绫诲瀷璁剧疆涓嶅悓鐨勬寜閽鑹?                    if self.config.theme == theme {
                        button = button.fill(crate::models::ThemeManager::get_accent_color(&theme));
                    }
                    
                    // 娣诲姞鎸夐挳骞跺鐞嗙偣鍑讳簨浠?                    if ui.add(button).clicked() {
                        self.config.theme = theme;
                        self.state.dark_mode = theme != crate::models::AppTheme::Light 
                            && theme != crate::models::AppTheme::Sepia;
                    }
                }
            });
        });
        
        ui.separator();
        
        // 涓籑O鏂囦欢璁剧疆閮ㄥ垎
        ui.heading("鍩虹MO鏂囦欢");
        
        ui.horizontal(|ui| {
            ui.label("涓籑O鏂囦欢:");
            
            if let Some(mo_file) = &self.state.main_mo_file {
                // 鏄剧ず鏂囦欢鍚?                let file_name = mo_file.file_name()
                    .map(|f| f.to_string_lossy().to_string())
                    .unwrap_or_else(|| mo_file.display().to_string());
                let response = ui.label(file_name);
                
                // 鎮仠鏃舵樉绀哄畬鏁磋矾寰?                let full_path = mo_file.to_string_lossy().to_string();
                response.on_hover_text(full_path);
            } else {
                ui.label("[鏈缃甝");
            }
            
            if ui.button("閫夋嫨MO鏂囦欢").clicked() {
                if let Some(mo_path) = rfd::FileDialog::new()
                    .add_filter("MO鏂囦欢", &["mo"])
                    .set_title("閫夋嫨Blender鐨刴o鏂囦欢")
                    .pick_file() {
                    
                    // 淇濆瓨涓籑O鏂囦欢璺緞
                    self.state.main_mo_file = Some(mo_path.clone());
                    self.config.main_mo_file = Some(mo_path.clone());
                    
                    // 娓呴櫎鍚堝苟缂撳瓨锛屽洜涓轰富MO鏂囦欢宸叉洿鏀?                    self.state.cached_merged_po = None;
                    self.state.needs_remerge = true;
                    
                    // 娣诲姞鏃ュ織
                    self.state.add_log(&format!("宸茶缃富MO鏂囦欢: {}", mo_path.display()));
                }
            }
            
            if ui.button("鑷姩鏌ユ壘").clicked() {
                self.auto_locate_blender_mo_file();
            }
            
            if ui.button("娓呴櫎").clicked() {
                self.state.main_mo_file = None;
                self.config.main_mo_file = None;
                
                // 娓呴櫎鍚堝苟缂撳瓨锛屽洜涓轰富MO鏂囦欢宸叉洿鏀?                self.state.cached_merged_po = None;
                self.state.needs_remerge = true;
                
                self.state.add_log("宸叉竻闄や富MO鏂囦欢璁剧疆");
            }
        });
        
        // 娣诲姞瀵煎嚭鍩虹MO鏂囦欢鐨勬寜閽拰璇存槑
        ui.horizontal(|ui| {
            if ui.button("瀵煎嚭鍩虹鏂囦欢").clicked() {
                self.export_base_mo_file();
            }
            ui.label("(灏嗗綋鍓嶇殑鍩虹MO鏂囦欢瀵煎嚭涓虹嫭绔嬫枃浠讹紝涓嶅仛浠讳綍鍚堝苟)");
        });
        
        ui.add_space(4.0);
        
        ui.horizontal(|ui| {
            ui.label("涓籑O鏂囦欢鎻忚堪:").on_hover_text("涓籑O鏂囦欢鏄疊lender鐨勫師濮嬬炕璇戞枃浠讹紝閫氬父浣嶄簬Blender瀹夎鐩綍鐨?datafiles/locale/zh_CN/LC_MESSAGES/'涓嬶紝鍚嶄负'blender.mo'");
        });
        
        ui.separator();
        
        // 杈撳嚭鐩綍璁剧疆閮ㄥ垎
        ui.heading("杈撳嚭璁剧疆");
        
        ui.horizontal(|ui| {
            ui.label("杈撳嚭鐩綍:");
            
            if let Some(output_dir) = &self.state.output_directory {
                // 鏄剧ず鐩綍鍚?                let dir_name = output_dir.display().to_string();
                let response = ui.label(dir_name);
                
                // 鎮仠鏃舵樉绀哄畬鏁磋矾寰?                let full_path = output_dir.to_string_lossy().to_string();
                response.on_hover_text(full_path);
            } else {
                ui.label("[鏈缃?- 灏嗕娇鐢ㄦ闈笂鐨刓"BLMM瀵煎嚭\"鏂囦欢澶筣");
            }
            
            if ui.button("閫夋嫨杈撳嚭鐩綍").clicked() {
                if let Some(dir) = rfd::FileDialog::new()
                    .set_title("閫夋嫨杈撳嚭鐩綍")
                    .pick_folder() {
                        self.state.output_directory = Some(dir.clone());
                        self.config.output_directory = Some(dir.clone());
                        self.state.add_log(&format!("宸茶缃緭鍑虹洰褰? {}", dir.display()));
                    }
            }
            
            if ui.button("娓呴櫎").clicked() {
                self.state.output_directory = None;
                self.config.output_directory = None;
                self.state.add_log("宸叉竻闄よ緭鍑虹洰褰曡缃紝灏嗕娇鐢ㄦ闈笂鐨刓"BLMM瀵煎嚭\"鏂囦欢澶?);
            }
        });
        
        // 娣诲姞榛樿杈撳嚭鐩綍璇存槑
        ui.add_space(4.0);
        ui.label("鎻愮ず: 鏈缃緭鍑虹洰褰曟椂锛屽皢榛樿鍦ㄦ闈笂鍒涘缓\"BLMM瀵煎嚭\"鏂囦欢澶癸紝骞跺皢鍚堝苟鍚庣殑MO鏂囦欢淇濆瓨鍒版澶勩€?);
        
        ui.separator();
        
        // 甯哥敤璁剧疆閮ㄥ垎
        ui.heading("甯哥敤璁剧疆");
        
        ui.horizontal(|ui| {
            ui.checkbox(&mut self.state.auto_batch, "鑷姩鎵瑰鐞?);
            ui.checkbox(&mut self.state.auto_close, "澶勭悊瀹屾垚鍚庡叧闂?);
        });
        
        ui.checkbox(&mut self.state.show_logs, "鏄剧ず鏃ュ織绐楀彛");
        
        // 楂樼骇璁剧疆閮ㄥ垎
        ui.collapsing("楂樼骇璁剧疆", |ui| {
            // 鏂板閫夐」: 蹇界暐涓籑O鍚堝苟
            ui.checkbox(&mut self.state.ignore_main_mo_entries, "蹇界暐涓籱o鍚堝苟")
                .on_hover_text("鍚敤鍚庯紝璇█鍖呬腑涓庝富MO鏂囦欢閲嶅鐨勬潯鐩皢琚拷鐣ワ紝淇濈暀涓籑O鏂囦欢涓殑鍘熷缈昏瘧");
            
            ui.horizontal(|ui| {
                ui.label(format!("绾跨▼姹? {} 绾跨▼", num_cpus::get()));
            });
        });
        
        // 妫€鏌ラ厤缃槸鍚︽湁鍙樻洿锛屽鏋滄湁鍒欎繚瀛?        if orig_main_mo_file != self.state.main_mo_file ||
           orig_dark_mode != self.state.dark_mode ||
           orig_auto_batch != self.state.auto_batch ||
           orig_auto_close != self.state.auto_close ||
           orig_show_logs != self.state.show_logs ||
           orig_ignore_main_mo_entries != self.state.ignore_main_mo_entries ||
           orig_theme != self.config.theme {
            // 淇濆瓨璁剧疆鍒伴厤缃枃浠?            self.config.main_mo_file = self.state.main_mo_file.clone();
            self.config.dark_mode = self.state.dark_mode;
            self.config.auto_batch = self.state.auto_batch;
            self.config.auto_close = self.state.auto_close;
            self.config.show_logs = self.state.show_logs;
            self.config.ignore_main_mo_entries = self.state.ignore_main_mo_entries;
            
            if let Err(e) = self.config.save() {
                self.state.add_log(&format!("鏃犳硶淇濆瓨閰嶇疆: {}", e));
            }
        }
    }

    // 瀹夎鏂拌瑷€鍖?    fn install_new_mod(&mut self) {
        // 鑾峰彇鎴栧垱寤篗OD缂撳瓨鐩綍
        let mods_dir = self.get_or_create_mods_cache_dir();
        if mods_dir.is_none() {
            self.state.add_log("閿欒: 鏃犳硶鍒涘缓璇█鍖呯紦瀛樼洰褰?);
            return;
        }
        
        let mods_dir = mods_dir.unwrap();
        
        // 鑷姩璁剧疆mods_directory鍒板浐瀹氱殑缂撳瓨鐩綍
        self.state.mods_directory = Some(mods_dir.clone());
        self.config.mods_directory = Some(mods_dir.clone());
        
        // 鎵撳紑鏂囦欢閫夋嫨瀵硅瘽妗嗭紝鍏佽澶氶€夛紝鍚屾椂鏀寔PO鍜孋SV鏂囦欢
        if let Some(files) = rfd::FileDialog::new()
            .add_filter("缈昏瘧鏂囦欢", &["po", "csv"])
            .add_filter("PO鏂囦欢", &["po"])
            .add_filter("CSV鏂囦欢", &["csv"])
            .set_title("閫夋嫨瑕佸畨瑁呯殑缈昏瘧鏂囦欢")
            .pick_files() {
                
            let files_count = files.len();
            self.state.add_log(&format!("閫夋嫨浜?{} 涓炕璇戞枃浠跺噯澶囧畨瑁?, files_count));
            
            // 璁板綍鎴愬姛瀹夎鐨勬枃浠舵暟閲?            let mut success_count = 0;
            
            // 鍒涘缓涓存椂缂撳瓨鐩綍鐢ㄤ簬CSV杞崲
            let cache_dir = if let Some(local_dir) = dirs::data_local_dir() {
                local_dir.join("BLMM").join("cache")
            } else {
                std::env::temp_dir().join("BLMM").join("cache")
            };
            
            // 纭繚缂撳瓨鐩綍瀛樺湪
            if let Err(e) = std::fs::create_dir_all(&cache_dir) {
                self.state.add_log(&format!("鍒涘缓缂撳瓨鐩綍澶辫触: {}", e));
                return;
            }
            
            // 澶勭悊姣忎竴涓€夋嫨鐨勬枃浠?            for file in files {
                // 纭畾鏂囦欢绫诲瀷
                let file_ext = file.extension().unwrap_or_default().to_string_lossy().to_lowercase();
                
                // 瀵逛簬CSV鏂囦欢锛屽厛杞崲涓篜O
                let processed_file = if file_ext == "csv" {
                    self.state.add_log(&format!("妫€娴嬪埌CSV鏂囦欢: {}", file.display()));
                    
                    // 鐢熸垚涓存椂PO鏂囦欢
                    let temp_po_path = cache_dir.join(format!("temp_{}.po", SystemTime::now()
                        .duration_since(std::time::UNIX_EPOCH)
                        .unwrap_or_default()
                        .as_secs()));
                    
                    // 杞崲CSV鍒癙O
                    match CsvConverter::convert_csv_to_po(&file, &temp_po_path) {
                        Ok(_) => {
                            self.state.add_log(&format!("鎴愬姛灏咰SV杞崲涓篜O: {}", temp_po_path.display()));
                            temp_po_path
                        },
                        Err(e) => {
                            self.state.add_log(&format!("CSV杞崲涓篜O澶辫触: {}", e));
                            continue;  // 璺宠繃姝ゆ枃浠?                        }
                    }
                } else {
                    file.clone()
                };
                
                // 鍒涘缓鏂扮殑MOD淇℃伅
                let orig_file_name = file.file_name().unwrap_or_default().to_string_lossy().to_string();
                let mut file_name = processed_file.file_name().unwrap_or_default().to_string_lossy().to_string();
                
                // 濡傛灉鏄粠CSV杞崲鐨凱O锛岀粰鏂囦欢鍚嶅姞涓婃爣璁?                if file_ext == "csv" {
                    let stem = orig_file_name.strip_suffix(".csv").unwrap_or(&orig_file_name);
                    file_name = format!("{}_from_csv.po", stem);
                }
                
                // 妫€鏌ユ槸鍚﹀凡瀛樺湪鍚屽悕璇█鍖咃紝濡傛灉瀛樺湪鍒欐坊鍔?new"鍚庣紑
                let mut counter = 0;
                let original_name = file_name.clone();
                let stem = if let Some(pos) = original_name.rfind('.') {
                    &original_name[0..pos]
                } else {
                    &original_name
                };
                let ext = if let Some(pos) = original_name.rfind('.') {
                    &original_name[pos..]
                } else {
                    ""
                };
                
                // 妫€鏌ュ悕绉版槸鍚﹀凡瀛樺湪锛屽鏋滃瓨鍦ㄥ垯娣诲姞"new"鍚庣紑
                while self.state.installed_mods.iter().any(|m| m.name == file_name) || mods_dir.join(&file_name).exists() {
                    counter += 1;
                    if counter == 1 {
                        file_name = format!("{}new{}", stem, ext);
                    } else {
                        file_name = format!("{}new{}{}", stem, counter, ext);
                    }
                }
                
                let mut mod_info = ModInfo::default();
                mod_info.name = file_name.clone();
                mod_info.status = ModStatus::Enabled; // 榛樿涓哄惎鐢ㄧ姸鎬?                mod_info.install_date = Some(Local::now());
                
                // 濡傛灉鏉ヨ嚜CSV锛屾坊鍔犳弿杩?                if file_ext == "csv" {
                    mod_info.description = Some("浠嶤SV杞崲鐨凱O鏂囦欢".to_string());
                }
                
                // 灏哖O鏂囦欢澶嶅埗鍒癕OD鐩綍
                let target_path = mods_dir.join(&file_name);
                
                // 灏濊瘯澶嶅埗鏂囦欢
                match std::fs::copy(&processed_file, &target_path) {
                    Ok(_) => {
                        mod_info.path = target_path;
                        
                        // 鍦ㄩ厤缃腑淇濆瓨璇od鐨勫惎鐢ㄧ姸鎬?                        self.config.saved_mods.insert(file_name.clone(), true);
                        
                        self.state.installed_mods.push(mod_info);
                        
                        // 鏍囪闇€瑕侀噸鏂板悎骞?                        self.state.needs_remerge = true;
                        
                        // 濡傛灉鏂囦欢鍚嶈淇敼锛屾坊鍔犵浉搴旀棩蹇?                        if file_name != original_name {
                            self.state.add_log(&format!("妫€娴嬪埌鍚屽悕璇█鍖咃紝宸查噸鍛藉悕涓? {}", file_name));
                        }
                        
                        // 鏄剧ず鎴愬姛淇℃伅锛屽尯鍒咰SV鍜孭O
                        if file_ext == "csv" {
                            self.state.add_log(&format!("鎴愬姛灏咰SV鏂囦欢杞崲骞跺畨瑁呬负璇█鍖? {}", file_name));
                        } else {
                            self.state.add_log(&format!("鎴愬姛瀹夎璇█鍖? {}", file_name));
                        }
                        
                        success_count += 1;
                        
                        // 濡傛灉鏄复鏃舵枃浠讹紝瀹夎鍚庡垹闄?                        if file_ext == "csv" {
                            let _ = std::fs::remove_file(&processed_file);
                        }
                    },
                    Err(e) => {
                        let file_display = file.file_name().unwrap_or_default().to_string_lossy();
                        self.state.add_log(&format!("璇█鍖?{} 瀹夎澶辫触: {}", file_display, e));
                        
                        // 濡傛灉鏄复鏃舵枃浠讹紝瀹夎澶辫触涔熻鍒犻櫎
                        if file_ext == "csv" {
                            let _ = std::fs::remove_file(&processed_file);
                        }
                    }
                }
            }
            
            // 瀹夎瀹屾垚鍚庢洿鏂伴厤缃苟鏄剧ず姹囨€讳俊鎭?            if success_count > 0 {
                // 淇濆瓨閰嶇疆
                self.config.save().ok();
                
                // 濡傛灉瀹夎浜嗗涓枃浠讹紝鏄剧ず姹囨€讳俊鎭?                if files_count > 1 {
                    self.state.add_log(&format!("鎵归噺瀹夎瀹屾垚锛氭垚鍔?{}/{}涓瑷€鍖?, success_count, files_count));
                }
            }
        }
    }
    
    // 鎵弿MOD鐩綍
    fn scan_mods_directory(&mut self) {
        // 鑾峰彇鎴栧垱寤篗OD缂撳瓨鐩綍
        let mods_dir = self.get_or_create_mods_cache_dir();
        if mods_dir.is_none() {
            self.state.add_log("閿欒: 鏃犳硶鍒涘缓璇█鍖呯紦瀛樼洰褰?);
            return;
        }
        
        let mods_dir = mods_dir.unwrap();
        
        // 鑷姩璁剧疆mods_directory鍒板浐瀹氱殑缂撳瓨鐩綍
        self.state.mods_directory = Some(mods_dir.clone());
        self.config.mods_directory = Some(mods_dir.clone());
        
        // 娓呯┖褰撳墠MOD鍒楄〃
        self.state.installed_mods.clear();
        
        // 鎵弿鐩綍涓嬬殑鎵€鏈塒O鏂囦欢
        match std::fs::read_dir(&mods_dir) {
            Ok(entries) => {
                let mut found = false;
                
                for entry in entries {
                    if let Ok(entry) = entry {
                        let path = entry.path();
                        
                        // 妫€鏌ユ槸鍚︿负PO鏂囦欢
                        if path.is_file() && path.extension().map_or(false, |e| e == "po") {
                            found = true;
                            
                            // 鍒涘缓MOD淇℃伅
                            let file_name = path.file_name().unwrap_or_default().to_string_lossy().to_string();
                            let mut mod_info = ModInfo::default();
                            mod_info.name = file_name.clone();
                            mod_info.path = path;
                            
                            // 浠庨厤缃腑鍔犺浇璇od鐨勫惎鐢ㄧ姸鎬?                            if let Some(enabled) = self.config.saved_mods.get(&file_name) {
                                mod_info.status = if *enabled {
                                    ModStatus::Enabled
                                } else {
                                    ModStatus::Disabled
                                };
                            } else {
                                // 濡傛灉娌℃湁淇濆瓨鐨勭姸鎬侊紝榛樿涓哄惎鐢?                                mod_info.status = ModStatus::Enabled;
                            }
                            
                            // 鑾峰彇鏂囦欢淇℃伅
                            if let Ok(metadata) = std::fs::metadata(&mod_info.path) {
                                // 灏濊瘯鑾峰彇瀹夎鏃ユ湡锛堝熀浜庢枃浠跺垱寤烘椂闂达級
                                if let Ok(created) = metadata.created() {
                                    if let Ok(duration) = created.duration_since(UNIX_EPOCH) {
                                        mod_info.install_date = Local.timestamp_opt(duration.as_secs() as i64, 0).single();
                                    }
                                }
                            }
                            
                            // 娣诲姞鍒癕OD鍒楄〃
                            self.state.installed_mods.push(mod_info);
                        }
                    }
                }
                
                if found {
                    self.state.add_log(&format!("鎵弿瀹屾垚锛屽彂鐜?{} 涓瑷€鍖?, self.state.installed_mods.len()));
                } else {
                    self.state.add_log("鏈湪鐩綍涓壘鍒颁换浣昉O璇█鍖?);
                }
                
                // 淇濆瓨閰嶇疆
                self.config.save().ok();
            },
            Err(e) => {
                self.state.add_log(&format!("鎵弿璇█鍖呯洰褰曞け璐? {}", e));
            }
        }
    }
    
    // 鍚敤MOD
    fn enable_mod(&mut self, index: usize) {
        if index < self.state.installed_mods.len() {
            self.state.installed_mods[index].status = ModStatus::Enabled;
            let mod_name = &self.state.installed_mods[index].name;
            
            // 鍦ㄩ厤缃腑淇濆瓨璇od鐨勫惎鐢ㄧ姸鎬?            self.config.saved_mods.insert(mod_name.clone(), true);
            self.config.save().ok();
            
            // 鏍囪闇€瑕侀噸鏂板悎骞?            self.state.needs_remerge = true;
            
            self.state.add_log(&format!("宸插惎鐢ㄨ瑷€鍖? {}", mod_name));
        }
    }
    
    // 绂佺敤MOD
    fn disable_mod(&mut self, index: usize) {
        if index < self.state.installed_mods.len() {
            self.state.installed_mods[index].status = ModStatus::Disabled;
            let mod_name = &self.state.installed_mods[index].name;
            
            // 鍦ㄩ厤缃腑淇濆瓨璇od鐨勭鐢ㄧ姸鎬?            self.config.saved_mods.insert(mod_name.clone(), false);
            self.config.save().ok();
            
            // 鏍囪闇€瑕侀噸鏂板悎骞?            self.state.needs_remerge = true;
            
            self.state.add_log(&format!("宸茬鐢ㄨ瑷€鍖? {}", mod_name));
        }
    }
    
    // 鍗歌浇MOD
    fn uninstall_mod(&mut self, index: usize) {
        if index < self.state.installed_mods.len() {
            let mod_info = &self.state.installed_mods[index];
            let mod_name = mod_info.name.clone();
            
            // 灏濊瘯鍒犻櫎鏂囦欢
            match std::fs::remove_file(&mod_info.path) {
                Ok(_) => {
                    // 浠庨厤缃腑绉婚櫎璇od鐨勭姸鎬佽褰?                    self.config.saved_mods.remove(&mod_name);
                    self.config.save().ok();
                    
                    self.state.installed_mods.remove(index);
                    
                    // 鏍囪闇€瑕侀噸鏂板悎骞?                    self.state.needs_remerge = true;
                    
                    self.state.add_log(&format!("宸插嵏杞借瑷€鍖? {}", mod_name));
                },
                Err(e) => {
                    self.state.add_log(&format!("鍗歌浇璇█鍖呭け璐? {}", e));
                }
            }
        }
    }

    // 搴旂敤閫€鍑烘椂淇濆瓨閰嶇疆
    fn save_config_on_exit(&mut self) {
        // 纭繚閰嶇疆瀵硅薄鍖呭惈鏈€鏂扮殑鐘舵€?        self.config.main_mo_file = self.state.main_mo_file.clone();
        self.config.mods_directory = self.state.mods_directory.clone();
        self.config.output_directory = self.state.output_directory.clone();
        
        // 淇濇寔鍚戝悗鍏煎鐨刣ark_mode璁剧疆
        self.config.dark_mode = self.state.dark_mode;
        
        self.config.auto_batch = self.state.auto_batch;
        self.config.auto_close = self.state.auto_close;
        self.config.show_logs = self.state.show_logs;
        self.config.ignore_main_mo_entries = self.state.ignore_main_mo_entries;
        
        // 淇濆瓨閰嶇疆
        if let Err(e) = self.config.save() {
            self.state.add_log(&format!("閫€鍑烘椂淇濆瓨閰嶇疆澶辫触: {}", e));
        } else {
            self.state.add_log("閰嶇疆宸蹭繚瀛?);
        }
    }

    // 灏嗕富MO鏂囦欢澶嶅埗鍒癇LMM鐩綍
    fn clone_main_mo_to_blmm(&mut self, original_mo_path: &PathBuf) -> Option<PathBuf> {
        use std::fs;

        // 鑾峰彇BLMM缂撳瓨鐩綍
        let blmm_dir = if let Some(local_dir) = dirs::data_local_dir() {
            local_dir.join("BLMM")
        } else {
            // 濡傛灉鏃犳硶鑾峰彇绯荤粺鏈湴鏁版嵁鐩綍锛屼娇鐢ㄤ复鏃剁洰褰?            std::env::temp_dir().join("BLMM")
        };

        // 纭繚鐩綍瀛樺湪
        if let Err(e) = fs::create_dir_all(&blmm_dir) {
            self.state.add_log(&format!("鍒涘缓BLMM鐩綍澶辫触: {}", e));
            return None;
        }

        // 涓篗O鏂囦欢鍒涘缓涓€涓柊鐨勮矾寰?        // 涓嶅啀闇€瑕佸師濮嬫枃浠跺悕锛岀洿鎺ヤ娇鐢ㄥ浐瀹氬悕绉?        let blmm_mo_path = blmm_dir.join("base_blender.mo");

        // 澶嶅埗鏂囦欢
        match fs::copy(original_mo_path, &blmm_mo_path) {
            Ok(_) => {
                self.state.add_log(&format!("宸插皢涓籑O鏂囦欢澶嶅埗鍒癇LMM鐩綍: {}", blmm_mo_path.display()));
                Some(blmm_mo_path)
            },
            Err(e) => {
                self.state.add_log(&format!("澶嶅埗涓籑O鏂囦欢鍒癇LMM鐩綍澶辫触: {}", e));
                None
            }
        }
    }

    // 鍦╬rocess_conversion_results鏂规硶鍚庢坊鍔犳柊鐨勬柟娉曞鐞嗗悎骞惰繘搴?    fn process_merge_status(&mut self) {
        // 鏇存柊鍔ㄧ敾璁℃暟鍣?        if self.state.is_merging {
            self.state.merge_progress_anim += 1;
        }
        
        // 妫€鏌ユ槸鍚︽湁鏉ヨ嚜鍚堝苟绾跨▼鐨勬秷鎭?        if let Ok(status) = self.merge_rx.try_recv() {
            match status {
                MergeStatus::Started => {
                    self.state.add_log("寮€濮嬪悎骞禤O鏂囦欢...");
                },
                MergeStatus::Progress(progress) => {
                    self.state.merge_progress = progress;
                    self.state.add_log(&format!("鍚堝苟杩涘害: {}%", (progress * 100.0) as i32));
                },
                MergeStatus::Completed(cached_path) => {
                    self.state.is_merging = false;
                    self.state.merge_progress = 1.0;
                    self.state.cached_merged_po = Some(cached_path.clone());
                    self.state.needs_remerge = false;
                    self.state.add_log(&format!("PO鏂囦欢鍚堝苟鎴愬姛锛屽凡鐢熸垚缂撳瓨鏂囦欢: {}", cached_path.display()));
                    self.state.add_log("鐐瑰嚮'搴旂敤鍒癕O鏂囦欢'灏嗗悎骞剁粨鏋滃簲鐢ㄥ埌涓籑O鏂囦欢");
                    
                    // 濡傛灉缂撳瓨鏂囦欢鍙敤锛屽垯鑷姩搴旂敤鍒癕O鏂囦欢
                    if self.state.cached_merged_po.is_some() {
                        self.apply_merged_po_to_mo();
                    }
                },
                MergeStatus::Failed(error) => {
                    self.state.is_merging = false;
                    self.state.add_log(&format!("鍚堝苟澶辫触: {}", error));
                }
            }
        }
    }

    // 涓撻棬鐢ㄤ簬鏄剧ず甯姪淇℃伅鐨勫嚱鏁?    fn show_help_window(&mut self, ctx: &egui::Context) {
        if self.state.show_help {
            egui::Window::new("浣跨敤甯姪")
                .collapsible(false)
                .min_width(500.0)
                .show(ctx, |ui| {
                    ui.heading("Blender瀛楀吀鍚堝苟绠＄悊鍣?By:鍑屽窛闆?);
                    ui.label("浣跨敤甯姪");
                    ui.separator();
                    
                    ui.collapsing("鍩烘湰浣跨敤娴佺▼", |ui| {
                        ui.add_space(5.0);
                        
                        ui.label("1. 璁剧疆 - 閫夋嫨涓籑O鏂囦欢鍜岃瑷€鍖呯洰褰?);
                        ui.label("   - 杩涘叆璁剧疆閫夐」鍗★紝璁剧疆Blender鐨勪富MO鏂囦欢");
                        ui.label("   - 璁剧疆瀛樻斁PO璇█鍖呯殑鐩綍");
                        ui.add_space(5.0);
                        
                        ui.label("2. 瀹夎璇█鍖?);
                        ui.label("   - 鐐瑰嚮銆屽畨瑁呰瑷€鍖呫€嶆寜閽€夋嫨PO鏂囦欢");
                        ui.label("   - 瀹夎鍚庤瑷€鍖呬細鑷姩鍚敤");
                        ui.add_space(5.0);
                        
                        ui.label("3. 绠＄悊璇█鍖?);
                        ui.label("   - 鍕鹃€?鍙栨秷鍕鹃€夎瑷€鍖呬互鍚敤/绂佺敤");
                        ui.label("   - 浣跨敤鈻测柤鎸夐挳璋冩暣璇█鍖呬紭鍏堢骇");
                        ui.label("   - 浼樺厛绾ч珮鐨勮瑷€鍖呯炕璇戜細瑕嗙洊浼樺厛绾т綆鐨勭炕璇?);
                        ui.add_space(5.0);
                        
                        ui.label("4. 搴旂敤鏇存敼");
                        ui.label("   - 淇敼璇█鍖呯姸鎬佸悗鐐瑰嚮銆岄噸鏂板悎骞躲€嶆寜閽?);
                        ui.label("   - 绛夊緟澶勭悊瀹屾垚鍚庯紝灏嗚嚜鍔ㄥ簲鐢ㄥ埌MO鏂囦欢");
                    });
                    
                    ui.collapsing("楂樼骇閫夐」", |ui| {
                        ui.label("- 鍦ㄨ缃腑鍙惎鐢ㄣ€屽拷鐣ヤ富mo鍚堝苟銆嶉€夐」锛屼繚鐣欏師濮婱O缈昏瘧");
                        ui.label("- 閫氳繃涓婁笅绉诲姩璇█鍖呰皟鏁翠紭鍏堢骇锛岄珮浼樺厛绾х殑璇█鍖呯炕璇戜細瑕嗙洊浣庝紭鍏堢骇鐨?);
                        ui.label("- 搴旂敤鍒癕O鏂囦欢鍚庯紝闇€瑕侀噸鍚疊lender鎵嶈兘鐪嬪埌鏇存敼鏁堟灉");
                    });
                    
                    ui.collapsing("鏁呴殰鎺掗櫎", |ui| {
                        ui.label("濡傛灉鍚堝苟澶辫触:");
                        ui.label("1. 妫€鏌ヤ富MO鏂囦欢鏄惁鍙鍐?);
                        ui.label("2. 纭繚璇█鍖呮槸鏍囧噯鐨凱O鏍煎紡");
                        ui.label("3. 鍦ㄦ棩蹇楀尯鏌ョ湅璇︾粏閿欒淇℃伅");
                        ui.label("4. 灏濊瘯鍚敤鎴栫鐢ㄣ€屽拷鐣ヤ富mo鍚堝苟銆嶉€夐」");
                    });
                    
                    ui.separator();
                    
                    if ui.button("鍏抽棴").clicked() {
                        self.state.show_help = false;
                    }
                });
        }
    }

    // 閲嶅懡鍚嶅璇濇
    fn render_rename_dialog(&mut self, ctx: &egui::Context) {
        if self.state.rename_mod_index.is_some() {
            egui::Window::new("閲嶅懡鍚嶈瑷€鍖?)
                .collapsible(false)
                .show(ctx, |ui| {
                    ui.horizontal(|ui| {
                        ui.label("鏂板悕绉?");
                        ui.text_edit_singleline(&mut self.state.rename_mod_name);
                    });
                    
                    ui.horizontal(|ui| {
                        if ui.button("纭畾").clicked() {
                            if let Some(index) = self.state.rename_mod_index {
                                self.rename_mod(index, self.state.rename_mod_name.clone());
                            }
                            self.state.rename_mod_index = None;
                        }
                        
                        if ui.button("鍙栨秷").clicked() {
                            self.state.rename_mod_index = None;
                        }
                    });
                });
        }
    }
    
    // 閲嶅懡鍚嶈瑷€鍖?    fn rename_mod(&mut self, index: usize, new_name: String) {
        if index >= self.state.installed_mods.len() || new_name.trim().is_empty() {
            return;
        }
        
        // 鑾峰彇璇█鍖呯洰褰?        let mods_dir = match self.get_or_create_mods_cache_dir() {
            Some(dir) => dir,
            None => {
                self.state.add_log("閿欒: 鏃犳硶鑾峰彇璇█鍖呯洰褰?);
                return;
            }
        };
        
        let mod_info = &mut self.state.installed_mods[index];
        let old_name = mod_info.name.clone();
        let old_path = mod_info.path.clone();
        
        // 濡傛灉鏂板悕绉颁笌鏃у悕绉扮浉鍚岋紝鍒欎笉鍋氫换浣曟搷浣?        if old_name == new_name {
            return;
        }
        
        // 纭繚鏂版枃浠跺悕浠?po缁撳熬
        let new_name_with_ext = if new_name.to_lowercase().ends_with(".po") {
            new_name
        } else {
            format!("{}.po", new_name)
        };
        
        let new_path = mods_dir.join(&new_name_with_ext);
        
        // 灏濊瘯閲嶅懡鍚嶆枃浠?        match std::fs::rename(&old_path, &new_path) {
            Ok(_) => {
                // 鏇存柊妯＄粍淇℃伅
                mod_info.name = new_name_with_ext.clone();
                mod_info.path = new_path;
                
                // 鏇存柊閰嶇疆涓殑鐘舵€佽褰?                if let Some(is_enabled) = self.config.saved_mods.remove(&old_name) {
                    self.config.saved_mods.insert(new_name_with_ext.clone(), is_enabled);
                }
                
                // 淇濆瓨閰嶇疆
                self.config.save().ok();
                
                self.state.add_log(&format!("璇█鍖呴噸鍛藉悕鎴愬姛: {} -> {}", old_name, new_name_with_ext));
                
                // 鏍囪闇€瑕侀噸鏂板悎骞?                self.state.needs_remerge = true;
            },
            Err(e) => {
                self.state.add_log(&format!("璇█鍖呴噸鍛藉悕澶辫触: {}", e));
            }
        }
    }

    // 鑷姩瀹氫綅Blender涓枃MO鏂囦欢
    fn auto_locate_blender_mo_file(&mut self) {
        self.state.add_log("姝ｅ湪鑷姩鎼滅储Blender涓枃MO鏂囦欢...");
        
        // 甯歌鐨凚lender瀹夎璺緞
        let common_paths = vec![
            "C:/Program Files/Blender Foundation",
            "D:/Program Files/Blender Foundation",
            "C:/Program Files (x86)/Blender Foundation",
        ];
        
        // 棣栧厛璁╃敤鎴烽€夋嫨Blender涓荤洰褰?        let selected_blender_dir = rfd::FileDialog::new()
            .set_title("閫夋嫨Blender瀹夎鐩綍")
            .set_directory(common_paths[0])
            .pick_folder();
            
        if let Some(blender_dir) = selected_blender_dir {
            // 鍙樉绀虹洰褰曞悕绉帮紝閬垮厤杩囬暱
            let dir_name = blender_dir.file_name()
                .map_or_else(|| "[鏈煡鐩綍]".to_string(),
                          |name| name.to_string_lossy().to_string());
            self.state.add_log(&format!("閫夋嫨浜咮lender鐩綍: {}", dir_name));
            
            // 鍦ㄩ€夊畾鐩綍涓煡鎵剧増鏈洰褰曪紙濡侭lender 4.3锛?            let mut version_dirs = Vec::new();
            if let Ok(entries) = std::fs::read_dir(&blender_dir) {
                for entry in entries.filter_map(|e| e.ok()) {
                    let path = entry.path();
                    if path.is_dir() {
                        let dir_name = path.file_name().unwrap_or_default().to_string_lossy();
                        if dir_name.starts_with("Blender ") {
                            version_dirs.push(path.clone());
                            self.state.add_log(&format!("鎵惧埌Blender鐗堟湰: {}", dir_name));
                        }
                    }
                }
            }
            
            // 濡傛灉鎵惧埌鐗堟湰鐩綍锛岃鐢ㄦ埛閫夋嫨
            let selected_version_dir = if !version_dirs.is_empty() {
                // 濡傛灉鍙湁涓€涓増鏈洰褰曪紝鐩存帴浣跨敤
                if version_dirs.len() == 1 {
                    Some(version_dirs[0].clone())
                } else {
                    // 鍒涘缓鐗堟湰鐩綍鍚嶇О鍒楄〃锛屼緵鐢ㄦ埛閫夋嫨
                    let version_dir_names: Vec<String> = version_dirs.iter()
                        .map(|p| p.file_name().unwrap_or_default().to_string_lossy().to_string())
                        .collect();
                        
                    // 璁╃敤鎴蜂粠瀵硅瘽妗嗕腑閫夋嫨鐗堟湰
                    let selected_result = rfd::MessageDialog::new()
                        .set_title("閫夋嫨Blender鐗堟湰")
                        .set_description(&format!("鎵惧埌澶氫釜Blender鐗堟湰锛岃閫夋嫨涓€涓?\n{}", 
                            version_dir_names.join("\n")))
                        .set_buttons(rfd::MessageButtons::OkCancel)
                        .show();
                        
                    if selected_result {
                        // 濡傛灉鐢ㄦ埛鐐瑰嚮纭畾锛岃浠栦滑閫夋嫨鍏蜂綋鐨勭増鏈洰褰?                        rfd::FileDialog::new()
                            .set_title("閫夋嫨Blender鐗堟湰鐩綍")
                            .set_directory(&blender_dir)
                            .pick_folder()
                    } else {
                        None
                    }
                }
            } else {
                // 娌℃湁鎵惧埌鏍囧噯鐨勭増鏈洰褰曪紝鐩存帴浣跨敤鎵€閫夌洰褰?                Some(blender_dir)
            };
            
            // 濡傛灉閫夋嫨浜嗙増鏈洰褰曪紝缁х画鏌ユ壘瀛愮増鏈洰褰曪紙濡?.3锛?            if let Some(version_dir) = selected_version_dir {
                self.state.add_log(&format!("閫夋嫨鐨勭増鏈洰褰? {}", version_dir.display()));
                
                // 鍦ㄧ増鏈洰褰曚腑鏌ユ壘瀛愮増鏈洰褰曪紙濡?.3锛?                let mut subversion_dirs = Vec::new();
                if let Ok(entries) = std::fs::read_dir(&version_dir) {
                    for entry in entries.filter_map(|e| e.ok()) {
                        let path = entry.path();
                        if path.is_dir() {
                            let dir_name = path.file_name().unwrap_or_default().to_string_lossy();
                            // 妫€鏌ユ槸鍚︿负鐗堟湰鍙锋牸寮忥紙濡?.3锛?                            if dir_name.chars().any(|c| c.is_digit(10)) && dir_name.contains('.') {
                                subversion_dirs.push(path.clone());
                                self.state.add_log(&format!("鎵惧埌瀛愮増鏈洰褰? {}", dir_name));
                            }
                        }
                    }
                }
                
                // 閫夋嫨瑕佷娇鐢ㄧ殑瀛愮増鏈洰褰?                let target_dir = if !subversion_dirs.is_empty() {
                    // 濡傛灉鍙湁涓€涓瓙鐗堟湰鐩綍锛岃闂敤鎴锋槸鍚︿娇鐢?                    if subversion_dirs.len() == 1 {
                        let result = rfd::MessageDialog::new()
                            .set_title("纭瀛愮増鏈洰褰?)
                            .set_description(&format!("鏄惁浣跨敤瀛愮増鏈洰褰? {}?", 
                                subversion_dirs[0].file_name().unwrap_or_default().to_string_lossy()))
                            .set_buttons(rfd::MessageButtons::YesNo)
                            .show();
                            
                        if result {
                            subversion_dirs[0].clone()
                        } else {
                            version_dir
                        }
                    } else {
                        // 璁╃敤鎴蜂粠澶氫釜瀛愮増鏈洰褰曚腑閫夋嫨
                        let selected_subversion = rfd::FileDialog::new()
                            .set_title("閫夋嫨Blender瀛愮増鏈洰褰?)
                            .set_directory(&version_dir)
                            .pick_folder();
                            
                        selected_subversion.unwrap_or(version_dir)
                    }
                } else {
                    version_dir
                };
                
                self.state.add_log(&format!("灏嗗湪鐩綍涓悳绱O鏂囦欢: {}", target_dir.display()));
                
                // 鍦ㄧ洰鏍囩洰褰曚腑鏌ユ壘MO鏂囦欢
                let mut found_mo_files = Vec::new();
                
                // 鏋勫缓鍙兘鐨勮瑷€鏂囦欢璺緞
                let mo_paths = vec![
                    target_dir.join("datafiles/locale/zh_HANS/LC_MESSAGES/blender.mo"),
                    target_dir.join("datafiles/locale/zh_CN/LC_MESSAGES/blender.mo"),
                    target_dir.join("locale/zh_HANS/LC_MESSAGES/blender.mo"),
                    target_dir.join("locale/zh_CN/LC_MESSAGES/blender.mo"),
                ];
                
                // 妫€鏌ユ瘡涓矾寰?                for path in mo_paths {
                    if path.exists() && path.is_file() {
                        self.state.add_log(&format!("鎵惧埌MO鏂囦欢: {}", path.display()));
                        found_mo_files.push(path);
                    }
                }
                
                // 濡傛灉娌℃壘鍒帮紝灏濊瘯閫掑綊鎼滅储
                if found_mo_files.is_empty() {
                    self.state.add_log(&format!("鍦ㄦ爣鍑嗚矾寰勬湭鎵惧埌MO鏂囦欢锛屽皾璇曢€掑綊鎼滅储: {}", target_dir.display()));
                    self.search_mo_files_recursively(&target_dir, &mut found_mo_files);
                }
                
                // 濡傛灉鎵惧埌鏂囦欢锛岃鐢ㄦ埛閫夋嫨鎴栬嚜鍔ㄩ€夋嫨绗竴涓?                if !found_mo_files.is_empty() {
                    // 鎸夋枃浠惰矾寰勬帓搴?                    found_mo_files.sort();
                    
                    // 濡傛灉鍙湁涓€涓枃浠讹紝鐩存帴浣跨敤瀹?                    if found_mo_files.len() == 1 {
                        let file_path = found_mo_files[0].clone();
                        let orig_path = file_path.clone(); // 鍏嬮殕涓€浠界敤浜庢棩蹇楁樉绀?                        // 澶嶅埗鍒癇LMM鐩綍骞朵娇鐢˙LMM鐩綍涓殑鏂囦欢
                        if let Some(blmm_path) = self.clone_main_mo_to_blmm(&file_path) {
                            self.state.main_mo_file = Some(blmm_path.clone());
                            self.config.main_mo_file = Some(blmm_path);
                        } else {
                            self.state.main_mo_file = Some(file_path.clone());
                            self.config.main_mo_file = Some(file_path);
                        }
                        self.config.save().ok();
                        self.add_log_with_path("宸茶嚜鍔ㄨ缃敮涓€鎵惧埌鐨凪O鏂囦欢", &orig_path);
                    } else {
                        // 璁╃敤鎴蜂粠鎵惧埌鐨勬枃浠朵腑閫夋嫨
                        self.state.add_log(&format!("鎵惧埌 {} 涓狹O鏂囦欢锛岃閫夋嫨涓€涓?", found_mo_files.len()));
                        
                        if let Some(selected_path) = rfd::FileDialog::new()
                            .set_title("閫夋嫨Blender涓枃MO鏂囦欢")
                            .add_filter("MO鏂囦欢", &["mo"])
                            .set_directory(found_mo_files[0].parent().unwrap_or(&PathBuf::from("/")))
                            .pick_file() {
                            
                            let orig_path = selected_path.clone(); // 鍏嬮殕涓€浠界敤浜庢棩蹇楁樉绀?                            // 澶嶅埗鍒癇LMM鐩綍骞朵娇鐢˙LMM鐩綍涓殑鏂囦欢
                            if let Some(blmm_path) = self.clone_main_mo_to_blmm(&selected_path) {
                                self.state.main_mo_file = Some(blmm_path.clone());
                                self.config.main_mo_file = Some(blmm_path);
                            } else {
                                self.state.main_mo_file = Some(selected_path.clone());
                                self.config.main_mo_file = Some(selected_path);
                            }
                            self.config.save().ok();
                            self.add_log_with_path("宸茶缃富MO鏂囦欢", &orig_path);
                        }
                    }
                } else {
                    self.state.add_log("鏈壘鍒癇lender涓枃MO鏂囦欢锛岃鎵嬪姩閫夋嫨銆?);
                    
                    // 鎵撳紑鏂囦欢閫夋嫨瀵硅瘽妗?                    if let Some(file) = rfd::FileDialog::new()
                        .add_filter("MO鏂囦欢", &["mo"])
                        .set_title("閫夋嫨Blender涓枃MO鏂囦欢")
                        .set_directory(&target_dir)
                        .pick_file() {
                            // 澶嶅埗鍒癇LMM鐩綍骞朵娇鐢˙LMM鐩綍涓殑鏂囦欢
                            let orig_file = file.clone(); // 鍏嬮殕涓€浠界敤浜庢棩蹇楁樉绀?                            if let Some(blmm_path) = self.clone_main_mo_to_blmm(&file) {
                                self.state.main_mo_file = Some(blmm_path.clone());
                                self.config.main_mo_file = Some(blmm_path);
                            } else {
                                self.state.main_mo_file = Some(file.clone());
                                self.config.main_mo_file = Some(file);
                            }
                            self.config.save().ok();
                            self.add_log_with_path("宸茶缃富MO鏂囦欢", &orig_file);
                    }
                }
            }
        } else {
            self.state.add_log("鏈€夋嫨Blender鐩綍锛屾搷浣滃彇娑堛€?);
        }
    }
    
    // 閫掑綊鎼滅储MO鏂囦欢
    fn search_mo_files_recursively(&mut self, dir: &PathBuf, found_files: &mut Vec<PathBuf>) {
        // 璁剧疆鏈€澶ф繁搴︿负8锛岄伩鍏嶆悳绱㈠お娣卞鑷存€ц兘闂
        let max_depth = 8;
        
        for entry in walkdir::WalkDir::new(dir)
            .follow_links(true)
            .max_depth(max_depth)
            .into_iter()
            .filter_map(|e| e.ok()) {
            
            let path = entry.path();
            
            // 妫€鏌ユ槸鍚︿负MO鏂囦欢
            if path.is_file() && path.extension().map_or(false, |e| e.to_string_lossy().to_lowercase() == "mo") {
                // 妫€鏌ユ枃浠惰矾寰勬槸鍚﹀寘鍚腑鏂囩浉鍏冲叧閿瘝
                let path_str = path.to_string_lossy().to_lowercase();
                if (path_str.contains("zh_") || path_str.contains("chinese") || 
                    path_str.contains("zh-") || path_str.contains("/zh/") || 
                    path_str.contains("\\zh\\")) && path_str.contains("blender") {
                    
                    // 鑾峰彇鏂囦欢鍚嶇敤浜庢棩蹇楁樉绀?                    let file_name = path.file_name()
                        .map_or_else(|| "[鏈煡鏂囦欢]".to_string(), 
                                   |name| name.to_string_lossy().to_string());
                    self.state.add_log(&format!("閫掑綊鎼滅储鎵惧埌MO鏂囦欢: {}", file_name));
                    found_files.push(path.to_path_buf());
                }
            }
        }
    }

    fn add_log_with_path(&mut self, message: &str, path: &PathBuf) {
        // 鎻愬彇鏂囦欢鍚嶇敤浜庢棩蹇楁樉绀?        let file_name = path.file_name()
            .map_or_else(|| "[鏈煡鏂囦欢]".to_string(), 
                      |name| name.to_string_lossy().to_string());
        self.state.add_log(&format!("{}: {}", message, file_name));
    }

    // 瀵煎嚭鍩虹鏂囦欢锛堜笉鍚堝苟锛?    fn export_base_mo_file(&mut self) {
        // 妫€鏌ユ槸鍚︽湁涓籑O鏂囦欢
        if self.state.main_mo_file.is_none() {
            self.state.add_log("閿欒: 璇峰厛鍦ㄨ缃腑璁剧疆涓籑O鏂囦欢");
            return;
        }
        
        let base_mo_file = self.state.main_mo_file.clone().unwrap();
        
        // 妫€鏌ユ枃浠舵槸鍚﹀瓨鍦?        if !base_mo_file.exists() {
            self.state.add_log(&format!("閿欒: 鍩虹MO鏂囦欢涓嶅瓨鍦? {}", base_mo_file.display()));
            return;
        }
        
        // 鍒涘缓杈撳嚭MO鏂囦欢璺緞 - 浣跨敤鐢ㄦ埛璁剧疆鐨勮緭鍑虹洰褰曟垨妗岄潰涓婄殑"BLMM瀵煎嚭"鏂囦欢澶?        let output_mo_path = if let Some(output_dir) = &self.state.output_directory {
            // 浣跨敤鐢ㄦ埛璁剧疆鐨勮緭鍑虹洰褰?            if let Err(e) = std::fs::create_dir_all(output_dir) {
                self.state.add_log(&format!("鍒涘缓杈撳嚭鐩綍澶辫触: {}", e));
                // 濡傛灉鍒涘缓鐩綍澶辫触锛屽洖閫€鍒版闈笂鐨?BLMM瀵煎嚭"鏂囦欢澶?                self.create_default_output_directory()
                    .map(|dir| dir.join("blender.mo"))
                    .unwrap_or_else(|| base_mo_file.with_file_name("blender.mo"))
            } else {
                // 浣跨敤璁剧疆鐨勮緭鍑虹洰褰?                output_dir.join("blender.mo")
            }
        } else {
            // 鏈缃緭鍑虹洰褰曪紝浣跨敤妗岄潰涓婄殑"BLMM瀵煎嚭"鏂囦欢澶?            self.create_default_output_directory()
                .map(|dir| dir.join("blender.mo"))
                .unwrap_or_else(|| {
                    // 濡傛灉鍒涘缓妗岄潰鏂囦欢澶瑰け璐ワ紝鍥為€€鍒颁富MO鏂囦欢鎵€鍦ㄧ洰褰?                    if let Some(parent) = base_mo_file.parent() {
                        parent.join("blender.mo")
                    } else {
                        base_mo_file.with_file_name("blender.mo")
                    }
                })
        };
        
        // 澶嶅埗鏂囦欢
        self.state.add_log(&format!("姝ｅ湪瀵煎嚭鍩虹MO鏂囦欢鍒? {}", output_mo_path.display()));
        match std::fs::copy(&base_mo_file, &output_mo_path) {
            Ok(_) => {
                self.state.add_log(&format!("鍩虹MO鏂囦欢瀵煎嚭鎴愬姛: {}", output_mo_path.display()));
                
                // 灏濊瘯鎵撳紑杈撳嚭鐩綍
                if let Some(parent) = output_mo_path.parent() {
                    if let Err(e) = open::that(parent) {
                        self.state.add_log(&format!("灏濊瘯鎵撳紑杈撳嚭鐩綍澶辫触: {}", e));
                    }
                }
            },
            Err(e) => {
                self.state.add_log(&format!("瀵煎嚭鍩虹MO鏂囦欢澶辫触: {}", e));
            }
        }
    }
}

impl eframe::App for App {
    fn update(&mut self, ctx: &egui::Context, frame: &mut eframe::Frame) {
        // Process background task results
        self.process_conversion_results();
        
        // Process merge status updates
        self.process_merge_status();
        
        // 璁剧疆涓婚
        let visuals = crate::models::ThemeManager::get_visuals(&self.config.theme);
        ctx.set_visuals(visuals);
        
        // 涓轰簡鍚戝悗鍏煎锛屼繚鎸乨ark_mode鏍囧織涓庝富棰樺悓姝?        self.state.dark_mode = self.config.theme != crate::models::AppTheme::Light 
            && self.config.theme != crate::models::AppTheme::Sepia;
        
        // 椤堕儴鑿滃崟鏍?        egui::TopBottomPanel::top("top_panel").show(ctx, |ui| {
            egui::menu::bar(ui, |ui| {
                // 鍏ㄥ眬鏆?浜ā寮忔寜閽?                egui::widgets::global_dark_light_mode_buttons(ui);
                ui.add_space(8.0);
                
                // 鏂囦欢鑿滃崟
                ui.menu_button("鏂囦欢", |ui| {
                    if ui.button("娣诲姞璇█鍖?).clicked() {
                        self.state.show_mods = true;
                        ui.close_menu();
                    }
                    
                    ui.separator();
                    
                    // 璁剧疆閫夐」 - 鐩存帴鎵撳紑璇█鍖呯鐞嗗櫒鐨勮缃爣绛鹃〉
                    if ui.button("璁剧疆").clicked() {
                        self.state.show_mods = true;
                        self.state.show_mods_tab = ModsTab::Settings;
                        ui.close_menu();
                    }
                    
                    ui.separator();
                    
                    if ui.button("閫€鍑?).clicked() {
                        frame.close();
                        // 鍏抽棴鏃朵繚瀛橀厤缃?                        self.save_config_on_exit();
                        ui.close_menu();
                    }
                });
                
                // 宸ュ叿鑿滃崟
                ui.menu_button("宸ュ叿", |ui| {
                    if ui.button("鍚堝苟璇█鍖?).clicked() {
                        self.merge_po_files();
                        ui.close_menu();
                    }
                    
                    if ui.button("瀵煎嚭鍩虹MO鏂囦欢").clicked() {
                        self.export_base_mo_file();
                        ui.close_menu();
                    }
                    
                    ui.separator();
                    
                    if ui.button("鎵归噺澶勭悊").clicked() {
                        self.batch_process();
                        ui.close_menu();
                    }
                });
                
                // 绐楀彛鑿滃崟
                ui.menu_button("绐楀彛", |ui| {
                    if ui.button("璇█鍖呯鐞嗗櫒").clicked() {
                        self.state.show_mods = true;
                        ui.close_menu();
                    }
                });
                
                // 甯姪鑿滃崟
                ui.menu_button("甯姪", |ui| {
                    if ui.button("浣跨敤甯姪").clicked() {
                        self.state.show_help = true;
                        ui.close_menu();
                    }
                    
                    ui.separator();
                    
                    if ui.button("鍏充簬").clicked() {
                        self.state.show_about = true;
                        ui.close_menu();
                    }
                });
            });
        });
        
        egui::CentralPanel::default().show(ctx, |ui| {
            if self.state.show_mods {
                self.render_mods(ui);
            } else {
                self.render_header(ui);
                self.render_operations(ui);
                ui.separator();
                
                if ui.button("璇█鍖呯鐞嗗櫒").clicked() {
                    self.state.show_mods = true;
                }
                
                ui.separator();
                self.render_logs(ui);
            }
        });
        
        self.render_settings(ctx);
        self.show_help_window(ctx);
        self.render_rename_dialog(ctx);
    }
    
    // Override the on_exit method to ensure configuration is saved
    fn on_exit(&mut self, _gl: Option<&eframe::glow::Context>) {
        self.save_config_on_exit();
    }
}

#[allow(dead_code)]
fn format_system_time(time: SystemTime) -> String {
    match time.duration_since(UNIX_EPOCH) {
        Ok(duration) => {
            let datetime = Local.timestamp_opt(duration.as_secs() as i64, 0).unwrap();
            datetime.format("%Y-%m-%d %H:%M:%S").to_string()
        },
        Err(_) => "Invalid time".to_string()
    }
} 
